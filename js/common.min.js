/***********************************************************

    GLOBAL JAVASCRIPT FUNCTIONS

***********************************************************/

var clickEvent,
    getUserInputMethod,

    createProgressBar,
    updateProgressBar,
    defaultEntryText = 'Enter your text here',
    noTouchElements = '.activity',

    toggleGlossary,
    togglePod,
    injectLinks,

    toggleAccessibleVersion,
    toggleFeedback,
    activitySummary,
    openHelpWindow,

    setMaxHeightOfElement,
    getMaxHeightOfElement,

    initPage,
    removeElementsInIE9,

    //list elements to be removed here
    IE9Elements = '.activity.mediaPlayer',

    IE9 = false,

    summaryBoxFrame = 
    '<div class="activitySummaryBox">' +
        '<div class="summaryTitle">' +
            '<p>Activity summary</p>' +
            '<button class="summaryClose">&times;</button>' +
        '</div>' +
        '<div class="subTitle">' +
            '<button class="summarySelect">Select all</button>' +
            '<button class="summaryPrint">Print me</button>' +
        '</div>' +
        '<div id="selectable" class="summaryContent"></div>' +
    '</div>' +
    '<div class="activitySummaryShadow"></div>',

    helpWindowFrame = 
    '<div class="activitySummaryBox help">' +
        '<div class="summaryTitle">' +
            '<p>Help &amp; Support</p>' +
            '<button class="summaryClose">&times;</button>' +
        '</div>' +
        '<div class="summaryContent help">'+
            '<iframe src="../../core/help.html"></iframe>' +
        '</div>' +
    '</div>' +
    '<div class="activitySummaryShadow"></div>',

    accessibleButtonText = 'Text/print version',
    interactiveButtonText = 'Interactive version';

/***********************************************************

    REMOVE ELEMENTS LISTED IN IE9Elements VARIABLE
    AND REPLACE WITH ACCESSIBLE IN IE9

***********************************************************/

removeElementsInIE9 = function() {

    $(IE9Elements).each(function(){
        $(this).next('.accessible').addClass('showIE9 visible');
    });

    //remove these elements
    $(IE9Elements).remove();

    $('button.print').on(clickEvent, function() {

        // always show accessibles with showIE9 class
        $('.accessible.showIE9').addClass('visible');
    });
};

/***********************************************************

    INITIAL PAGE EVENTS AND HANDLERS

***********************************************************/

initPage = function() {

    getUserInputMethod();

    $('.activity .loader button').on(clickEvent, removeLoader);

    //click handler for feedback panel button
    $('.feedbackWrapper button').on(clickEvent, toggleFeedback);
    //click handler for pod buttons
    $('.pod button').on(clickEvent, togglePod);
    //click handler for glossary links
    $("span.glossaryLink").on(clickEvent, toggleGlossary);
    //click handler for accessible version button
    $('button.print').on(clickEvent, toggleAccessibleVersion);
    $('button.help').on(clickEvent, openHelpWindow);

    

    /***********************************************************

        TRIAL - STICKY MENU WHEN SCROLLING */

    if(!Modernizr.touch) {
        var menuElement = $('div.menu');
        var menuTop = menuElement.offset().top;
        var win = $(window);

        win.scroll(function() {
            menuElement.toggleClass('sticky', win.scrollTop() > menuTop);
        });
    }

    //generate accessible pods
    $('.pod').each(function(){

        var thisPod = $(this);

        var clone = $(this).clone();

        clone.addClass('accessible').appendTo('.contentWrapper');

        if(clone.find('.mediaPlayer').length === 1) {

            var thisPlayer = clone.find('.mediaPlayer');
            var playerID = thisPlayer.attr('id') + '_acc';
            thisPlayer.attr('id', playerID);
        }

        setTimeout(function(){
            if(thisPod.hasClass('videopod')) {

                console.log(thisPod.find('.accessible').length)

                // clone.append('HELLO');
                clone.find('.podText').append(thisPod.find('.feedbackWrapper .accessible').html());
                // clone.find('.podText').append('<div class="accessible"' + thisPod.find('.feedbackWrapper .accessible').html() + '</div>');
            }
        }, 500)

        
    });

    injectLinks();
};

/***********************************************************

    TURN ACCESSIBLE VERSION ON/OFF

***********************************************************/

toggleAccessibleVersion = function() {

    var _this = $(this);

    _this.toggleClass('active');
    
    $('.activity, button.viewTranscript').toggleClass('hidden');
    $('.PDS_Poll').toggle();

    //ACCESSIBLE
    if($(this).hasClass('active')) {

        $('.accPrintTab').show()

        $(this).find('span').html(interactiveButtonText);

        $('.accessible .transcriptBlock').show();
        $('.accessible').addClass('visible');

        //stop video/audio from playing
        $('.activity.mediaPlayer').each(function(){

            if($(this).find('iframe').length === 1) {
                var splitStr = $(this).find('iframe').attr('src')/*.split('?')[0];*/;
                $(this).find('iframe').data('src', splitStr);
                $(this).find('iframe').attr('src','');
            } else {

                var a = $(this).find('audio');
                a[0].pause();
            }
        });

        $('.feedbackWrapper').each(function(){

            $(this).find('button').hide();
            $(this).find('.feedback').show();
        });

        $('.podWrapperPods .pod').hide();

        $('.glossaryDefinition').remove();

        $('.glossaryLink').each(function(){

            $(this).addClass('noStyle');


            if($(this).data('term-change')) {

                $(this).parent().after(
                    '<div class="glossaryDefinition">' +
                        '<h2>'+$(this).data('term-change')+'</h2>' + 
                        '<p>' + $(this).data('glossary') + '</p>'+
                    '</div>'
                );

            } else {
                $(this).parent().after(
                    '<div class="glossaryDefinition">' +
                        '<h2>'+$(this).html()+'</h2>' + 
                        '<p>' + $(this).data('glossary') + '</p>'+
                    '</div>'
                );
            }
        })

    //INTERACTIVE
    } else {

        $(this).find('span').html(accessibleButtonText);
        $('.accPrintTab').hide();

        $('.activity.mediaPlayer').each(function(){

            //replace video/audio source
            if($(this).find('iframe').length === 1) {

                $(this).find('iframe').attr('src', $(this).find('iframe').data('src') + '?autoplay=0');
            }
        });
        
        $('.accessible .transcriptBlock').hide();
        $('.accessible .transcriptBlock.selected').show();
        $('.accessible').removeClass('visible');
        $('button.viewTranscript').text('transcript');

        $('.feedbackWrapper').each(function(){

            $(this).find('button').show().text('feedback');
            $(this).find('button.viewTranscript').text('transcript');
            $(this).find('.feedback').hide();
        });

        $('.podWrapperPods .pod').show();

        $('.glossaryLink').removeClass('noStyle');
        $('.glossaryLink').data('open', false);

        $('.glossaryDefinition').remove();
        // $("span.glossaryLink").off(clickEvent);
        // $("span.glossaryLink").on(clickEvent, toggleGlossary);
    }

    $('.accessibleSwap').each(function()
    {
        var temp = $(this).html();
        $(this).html($(this).data('swap'));
        $(this).data('swap', temp);

        // if(_this.hasClass('active') {
            
        // } else {
        //     $(this).find('button').show();
        // }
    });

    //remove styling of instructional text??

    $('.instructional-remove').each(function() {

        $(this).toggleClass('instructional');
    });
};

/***********************************************************

    OPEN HELP WINDOW

***********************************************************/

openHelpWindow = function() {

    $('body').append(helpWindowFrame);
    var helpWindow = $('body').find('.activitySummaryBox');

    var closeHelpWindow = function(){
        helpWindow.remove();
        $('body').find('.activitySummaryShadow').remove(); //tidy up
        $(this).off(clickEvent);
    };

    helpWindow.find('button.summaryClose').on(clickEvent, closeHelpWindow);

    if(!Modernizr.touch) {
        helpWindow.next('.activitySummaryShadow').on(clickEvent, closeHelpWindow);
    }

    
};

/***********************************************************

    OPEN CLOSE PODS

***********************************************************/

togglePod = function() {

    var _this = $(this), _thisPod;

    if($(this).hasClass('podButton')) {

        //open pod
        _thisPod = _this.parent();
        _thisPod.after('<div class="podShadow"></div>');

        if(_thisPod.hasClass('videopod')) {
            _thisPod.find('iframe').attr('src', _thisPod.find('iframe').data('src') + '?autoplay=0');
        }

    } else {

        //close pod
        _thisPod = _this.parents().eq(1);
        _thisPod.next('.podShadow').remove();
        _thisPod.find('.podText').scrollTop(0);

        if(_thisPod.hasClass('videopod')) {

            var splitStr = _thisPod.find('iframe').attr('src')/*.split('?')[0];*/;
            _thisPod.find('iframe').data('src', splitStr);
            _thisPod.find('iframe').attr('src','');
        }
    }
    
    _thisPod.toggleClass('open');
};

/***********************************************************

    INJECT JSON FOR HOSTED LINKS

***********************************************************/

injectLinks = function() {

    var linkWrapper = $('span.hostedLink');
    var ID = '', link;

    $.getJSON('https://epigeum.com/downloads/hostedLinksData.json', function(urlData){

        linkWrapper.each(function(){
    
            try {
                ID = $(this).data('id');
                link = urlData[ID];
                $(this).html(link.htmlContent);
            }

            catch(err) {
                console.log("Error: Link ("+ID+ ") not found in JSON. Please check the link data-id matches the JSON and try again.");
            }
        });

    }).error(function(){
        console.log('"Error: Cannot find JSON. Check the URL is correct."')
    });
};

/***********************************************************

    SHOW/HIDE GLOSSARY TERMS

***********************************************************/

toggleGlossary = function() {

    var _this = $(this);

    if(!_this.hasClass('noStyle')) {

        if(_this.data('open')) {

            _this.parent().next('div.glossaryDefinition').remove();
            _this.data('open', false);

        } else {

            if(_this.data('term-change')) {

                _this.parent().after(
                    '<div class="glossaryDefinition">' +
                        '<h2>'+_this.data('term-change')+'</h2>' + 
                        '<p>' + _this.data('glossary') + '</p>'+
                    '</div>'
                );

            } else {
                _this.parent().after(
                    '<div class="glossaryDefinition">' +
                        '<h2>'+_this.html()+'</h2>' + 
                        '<p>' + _this.data('glossary') + '</p>'+
                    '</div>'
                );
            }

            _this.data('open', true);
        }

        
        
    }
};

/***********************************************************

    SHOW/HIDE FEEDBACK PANEL

***********************************************************/

toggleFeedback = function() {

    var _this = $(this);
    _this.next('.feedback').toggle();

    var str = _this.text();

    if(_this.parent().hasClass('feedbackWrapper')) {
        if(str.charAt(0) === 'h') {
            var splitStr = str.slice(5)
            _this.text(splitStr);

            if(_this.next('.feedback').find('audio')) {

                $('audio').each(function(){
                    this.pause();
                    this.currentTime = 0;

                    // this.parent().find('button').removeClass('playing');
                });

                $('.mediaPlayer').find('button').removeClass('playing');
            }
            
        } else {
            // _this.text('feedback');
            _this.text('hide ' + _this.text());
        }
    }
};

/***********************************************************

    SHOW ACTIVITY SUMMARY BOX

***********************************************************/

activitySummary = function(page, activity, summaryText) {

    activity.after(summaryBoxFrame);

    var summaryBox = activity.next('.activitySummaryBox');
    var summaryBoxContent = activity.next('.activitySummaryBox').find('.summaryContent');
    var summaryBoxShadow = activity.next('.activitySummaryShadow');
    var range;

    summaryBoxContent.append(summaryText);

    summaryBox.find('button.summarySelect').on(clickEvent, function() {

        if (document.selection) {
            document.selection.empty();
            range = document.body.createTextRange();
            range.moveToElementText(document.getElementById('selectable'));
            range.select();
        }
        
        else if (window.getSelection) {
            window.getSelection().removeAllRanges();
            range = document.createRange();
            range.selectNode(document.getElementById('selectable'));
            window.getSelection().addRange(range);
        }
    });

    var closeSummary = function(){
        summaryBox.remove();
        activity.next('.activitySummaryShadow').remove(); //tidy up
        $(this).off(clickEvent);

        if (document.selection) {
            document.selection.empty();
        } else if (window.getSelection) {
            window.getSelection().removeAllRanges();
        }
    };

    summaryBox.find('button.summaryClose').on(clickEvent, closeSummary);

    // if(!Modernizr.touch) {
    //     alert('no touch');
    //     summaryBox.next('.activitySummaryShadow').on(clickEvent, closeSummary);
    // }
    
    summaryBox.find('button.summaryPrint').on(clickEvent, function(){
        
        //create a new window with printable content, print, and close
        var popupWin = window.open('', '_blank', 'width=600,height=600,scrollbars=yes');
        popupWin.document.open();
        popupWin.document.write('<html><head><link rel="stylesheet" href="../css/printStyle.css" /></head><body onload="window.print()">' + 
            '<ul>' +
                '<li>' + page.data('programme') + '</li>' +
                '<li>' + page.data('course') + '</li>' +
                '<li>' + $('p.unitTitle').text()  + '</li>' +
                '<li>' + $('span.pageTitle').text() + '</li>' +
            '</ul>' +
            summaryBoxContent.html() + 
            '</body></html>');
        popupWin.document.close();
    });

    summaryBox.find('audio').remove();
};

/***********************************************************

    REMOVE ACTIVITIES FOR IPAD

***********************************************************/

removeActivities = function() {

    //INSERT CONDITION HERE
    if(Modernizr.touch) {

        $(noTouchElements).each(function(index){

            if(!$(this).hasClass('mediaPlayer')) {
                $(this).next('.accessible').addClass('showIE9 visible');
                $(this).remove();
            }
        });

        $('button.print').on(clickEvent, function() {

                //always show accessibles with showIE9 class
            $('.accessible.showIE9').addClass('visible');
        });
    }
};

/***********************************************************

    REMOVE LOADER DIV ON CLICK OF BUTTON WITHIN IT

***********************************************************/

removeLoader = function() {

    $(this).parent().fadeOut('1500');
};

/***********************************************************

    DETERMINE WHETHER INPUT IS CLICK OR TOUCH

***********************************************************/


getUserInputMethod = function() {

    clickEvent = (Modernizr.touch) ? 'touchend':'click';
    return clickEvent;
};

/***********************************************************

    CALCULATE GAP BETWEEN INLINE SCREENS IN ACTIVITIES

***********************************************************/

getDistanceBetweenElements = function(element) {

    var d = element.eq(1).offset().left - element.eq(0).offset().left;
    return d;
};

/***********************************************************

    SLIDE SCREENS FORWARD/BACKWARDS

***********************************************************/

slideElements = function(activity, wrapperElement, inc, settings, distance) {

    if(inc === 1 && settings.current < settings.screenLength-1 || inc === -1 && settings.current > 0) {

        settings.current += inc;
        updateProgressBar(activity, settings.current, inc);
    } else if (inc === 0) {
        settings.current = inc;
        updateProgressBar(activity, settings.current, inc);
    }

    //disable back button at start
    if(settings.current === 0) {
        activity.find('button.back').attr('disabled', true);
    } else {
        activity.find('button.back').attr('disabled', false);
    }

    // activity.find('audio')[0].pause();
    
    $('audio').each(function(){
        this.pause();
        // this.currentTime = 0;
    }); 

    //pause audio if present
    // if(activity.find('audio').length > 0) {

        // activity.find('audio').each(function(index){

            // $(this)[index].pause();
        // })

        // activity.find('audio')[0].pause();
        // activity.find('audio')[1].pause();
    // }

    //animate using css3, else use jquery
    if(Modernizr.csstransitions) {
        wrapperElement.css('left', settings.current * -distance + 'px');
    } else {
        wrapperElement.animate({
            left: settings.current * -distance + 'px'
        }, 500);
    }

    return settings;
};

/***********************************************************

    GET MAX VALUE OF A SET OF ELEMENTS AND SET THEM
    ALL TO THAT VALUE

***********************************************************/

setMaxHeightOfElement = function(activity, element) {

    var height=0;

    for(i=0;i<element.length;i++) {

        if(element.eq(i).height() > height) {
            height = element.eq(i).height();
        }
    }

    element.height(height);
};

/***********************************************************

    GET THE MAXIMUM HEIGHT OF A PARTICULAR ELEMENT

***********************************************************/

getMaxHeightOfElement = function(activity, element) {

    var height=0;

    for(i=0;i<element.length;i++) {

        if(element.eq(i).height() > height) {
            height = element.eq(i).height();
        }
    }

    return height;
};


/***********************************************************

    CENTER-ALIGN AN ABSOLUTLEY POSITIONED ELEMENT

***********************************************************/

centreElement = function(element, parent) {
    element.css('top', (parent.height()/2)-(element.height()/2) + 'px');
    element.css('left', (parent.width()/2)-(element.width()/2) + 'px');
};

/***********************************************************

    FOCUS/BLUR HANDLER FOR ALL TEXT INPUT BOXES

***********************************************************/

textEntryFocus = function(element, defaultText) {
    $(element).on('focus', function() {
        if($(this).val() === defaultText) {
            $(this).val('');
        }
    }).on('blur', function() {
        if($(this).val() === '') {
            $(this).val(defaultText);
        }
    }).val(defaultText);
};

/***********************************************************

    GENERATE PROGRESS BAR

***********************************************************/

createProgressBar = function(activity, length) {

    var progressBar = activity.find('.progressBar'),
        stepWidth = activity.width()/length;

    for(i=0;i<length;i++) {
        progressBar.append('<div />');
    }

    progressBar.find('div').addClass('step empty');
    progressBar.find('div').first().toggleClass('empty full');

    progressBar.find('div').each(function(){
        $(this).css('width', stepWidth);
    });
};

/***********************************************************

    UPDATE PROGRESS BAR

***********************************************************/

updateProgressBar = function(activity, currentStep, inc) {

    var progressBar = activity.find('.progressBar');

    switch(inc) {
        case 1:
        progressBar.find('div').eq(currentStep).toggleClass('empty full');
        break;
        case -1:
        progressBar.find('div').eq(currentStep+1).toggleClass('empty full');
        break;
        case 0:
        progressBar.find('div').removeClass('full').addClass('empty');
        progressBar.find('div').first().removeClass('empty').addClass('full');
        break;
    }
};

/***********************************************************

    REUSABLE SHUFFLE FUNCTION

***********************************************************/

(function($){
 
    $.fn.shuffle = function() {
 
        var allElems = this.get(),
            getRandom = function(max) {
                return Math.floor(Math.random() * max);
            },
            shuffled = $.map(allElems, function(){
                var random = getRandom(allElems.length),
                    randEl = $(allElems[random]).clone(true)[0];
                allElems.splice(random, 1);
                return randEl;
           });
 
        this.each(function(i){
            $(this).replaceWith($(shuffled[i]));
        });
        
        // console.log('shuffled');
        return $(shuffled);
 
    };
 
})(jQuery);


// @codekit-append "templates/actionMaze.js"
// @codekit-append "templates/book.js"
// @codekit-append "templates/checklist.js"
// @codekit-append "templates/classification.js"
// @codekit-append "templates/cloze.js"
// @codekit-append "templates/comic.js"
// @codekit-append "templates/dragDrop.js"
// @codekit-append "templates/flipper.js"
// @codekit-append "templates/labelledText.js"
// @codekit-append "templates/ladder.js"
// @codekit-append "templates/matching.js"
// @codekit-append "templates/mcq.js"
// @codekit-append "templates/mediaPlayer.js"
// @codekit-append "templates/painting.js"
// @codekit-append "templates/paragraphSequencing.js"
// @codekit-append "templates/pcnt.js"
// @codekit-append "templates/pyramid.js"
// @codekit-append "templates/reflection.js"
// @codekit-append "templates/relatedConcepts.js"
// @codekit-append "templates/seesaw.js"
// @codekit-append "templates/splashscreen.js"
// @codekit-append "templates/slider.js"
// @codekit-append "templates/slidersWithSummary.js"
// @codekit-append "templates/tabbing.js"

(function($) {

    $.fn.actionMaze = function( options ) {

        var activity = $(this), init, settings, accessible, _screen, moveButton, restartBtn, restartActivity;

        moveScreens = function() {
            _screen.hide();
            var loc = $(this).data('goto');
            $('.screen[data-id="'+loc+'"]').fadeIn();
            if(loc.charAt(0) === 'e') {
                restartBtn.attr('disabled', false)
            }
        };

        restartActivity = function() {
            _screen.hide();
            var loc = $(this).data('goto');
            $('.screen[data-id="'+loc+'"]').show();
            $(this).attr('disabled', true);
        }
        
        init = function() {

            settings = $.extend({
                
            }, options);

            _screen = activity.find('.screen');
            moveButton = activity.find('.item.goTo');
            restartBtn = activity.find('button.restart');

            moveButton.on(clickEvent, moveScreens);
            restartBtn.on(clickEvent, restartActivity).attr('disabled', true);

            setMaxHeightOfElement(activity, _screen);

            _screen.hide().first().show();

            _screen.height(_screen.height() + 10);



            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');
            accessible.append('ACCESSIBLE VERSION NEEDS WRITING');
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.book = function( options ) {

        var activity = $(this), settings, init, accessible, book, nextBtn, backBtn, nextClick, backClick;

        nextClick = function() {

            console.log(settings.current, settings.pageLength)

            if(settings.current !== settings.pageLength-1) {

                book.booklet('next');
                settings.current++;
                updateProgressBar(activity, settings.current, 1);

                nextBtn.attr('disabled', true);
                backBtn.attr('disabled', true);

                setTimeout(function(){

                    if(settings.current !== settings.pageLength-1) {
                        nextBtn.attr('disabled', false);
                    }

                    backBtn.attr('disabled', false);

                }, 350);

            }

            
        };

        backClick = function() {

            if(settings.current !== 0) {
                book.booklet('prev');
                settings.current--;
                updateProgressBar(activity, settings.current, -1);

                backBtn.attr('disabled', true);
                nextBtn.attr('disabled', true);

                setTimeout(function(){

                    if(settings.current !== 0) {
                        backBtn.attr('disabled', false);
                    }

                    nextBtn.attr('disabled', false);

                }, 350);
            }
        };

        init = function() {

            book = activity.find('#mybook');

            settings = $.extend({

                pageLength: 1 + book.find('div.page').length/2,
                frontCover: 'http://placehold.it/260x400/',
                current: 0

            }, options);

            // settings.pagelength++;
            
            backBtn = activity.find('button.back');
            nextBtn = activity.find('button.next');
            backBtn.attr('disabled', true);
            // nextBtn.attr('disabled', false);
            backBtn.on(clickEvent, backClick);
            nextBtn.on(clickEvent, nextClick);

            activity.find('.page.cover').css('background', 'url('+ settings.frontCover + ')');

            var bookWidth;

            if(activity.hasClass('wide')) {
                bookWidth = 732;
            } else {
                bookWidth = 520;
            }

            book.booklet({
                closed: true,
                speed: 300,
                pageNumbers: false,
                hoverWidth: 0,
                shadows: false,
                width: bookWidth,
                pagePadding: 0
            });

            activity.append('<div class="progressBar"></div>');  
            createProgressBar(activity, settings.pageLength);

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            for(i=0;i<activity.find('.pageContent').length;i++) {

                accessible.append(activity.find('.pageContent').eq(i).html());

                if(i !== activity.find('.pageContent').length-1) {

                    accessible.append('<hr />');
                }
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.checklist = function( options ) {

        var activity = $(this), hideFeedbackAndClearSelection, init, nextBtn, nextClick, restartBtn, restartClick, setInitialVisibilityOfItems, settings, accessible;
            
        restartClick = function() {

            //cache jQuery object
            var _this = $(this);

            _this.prop('disabled', true);

            //if tickandcross disable next button otherwise enable it
            nextBtn.prop('disabled', settings.type === 'tickandcross');

            hideFeedbackAndClearSelection();
            setInitialVisibilityOfItems();

            if(settings.recordAnswers) {
                activity.find('button.faded').removeClass('faded');
            }
        };

        nextClick = function() {

            //cache jQuery object
            var _this = $(this);

            activity.find('.item.invisible').first().removeClass('invisible');
            
            //if tickandcross disable next button otherwise enable it
            _this.prop('disabled', settings.type === "tickandcross");

            // if all items are visible
            if(activity.find('.item.invisible').length < 1) {

                restartBtn.prop('disabled', settings.type === "tickandcross");
                _this.prop('disabled', true);

                if(settings.feedbackAfter) {

                    accessible.next('.feedbackWrapper').find('button').attr('disabled', false);
                }
            }

            hideFeedbackAndClearSelection();
        };

        buttonClick = function() {

            //cache jQuery object
            var _this = $(this),
                parentItem = _this.parents().eq(1),
                firstInvisibleItemIndex = activity.find('.invisible').first().index()-1,
                navButton;

            if(settings.type === 'ticklist') {

                _this.toggleClass('selected');

            } else if(settings.type === 'tickandcross') {

                if(settings.recordAnswers) {

                    _this.parent().find('button').addClass('faded');
                    _this.removeClass('faded');
                }

                activity.find('.itemFeedback').hide();
                parentItem.find('.itemFeedback').eq(_this.index()).fadeIn();
                activity.find('.selected').removeClass('selected');
                _this.addClass('selected');

                //check if last item in list
                if(firstInvisibleItemIndex < 0) {
                    restartBtn.attr('disabled', false);
                } else {

                    if(parentItem.index() === firstInvisibleItemIndex) {
                        nextBtn.attr('disabled', false);
                    }
                }
            }
        };

        viewSummary = function(){

            
        };

        hideFeedbackAndClearSelection = function() {
            activity.find('.itemFeedback').hide();
            activity.find('.selected').removeClass('selected');
        };

        setInitialVisibilityOfItems = function()
        {   
            if(settings.type !== 'ticklist') {
                activity.find('.item').addClass('invisible');
                activity.find('.item').first().removeClass('invisible');
            }
        };
            
        init = function() {
            // Establish default settings and 
            // override with options param (set in html)
            settings = $.extend({
                type: 'checklist',
                quiz: false,
                itemLength: activity.find('.item').length,
                itemText: 'Item',
                thoughtsText: 'Our thoughts:',
                hasCorrectAnswers: true,
                recordAnswers: false,
                feedbackAfter: false
            }, options);

            //set elements as variables
            nextBtn = activity.find('button.next');
            restartBtn = activity.find('button.restart');
            itemBtn = activity.find('.item button');
            summaryBtn = activity.find('button.summmary');

            // click handlers
            nextBtn.on(clickEvent, nextClick);
            restartBtn.on(clickEvent, restartClick);
            itemBtn.on(clickEvent, buttonClick);

            //set nav buttons initial state
            restartBtn.prop('disabled', true);

            //type-specific overrides
            if(settings.type === 'tickandcross') {
                nextBtn.prop('disabled', true);
                activity.find('.item').addClass('short');
            }

            if(settings.type === "ticklist") {
                activity.find('.item').addClass('short');

                summaryBtn.on(clickEvent, viewSummary);
            }

            //initial visibility of checklist items
            setInitialVisibilityOfItems();
            createProgressBar(activity, settings.itemLength);

            //generate accessible version
            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            if(settings.type === 'checklist' || settings.type === 'ticklist') {

                accessible.append('<ul></ul>');

                for(i=0;i<settings.itemLength;i++) {
                    accessible.find('ul').append('<li>' + activity.find('.item').eq(i).find('p').html() + '</li>');
                }

            } else {
                for(i=0;i<settings.itemLength;i++) {
                    accessible.append('<h3>'+settings.itemText+ ' ' + (i+1) + ' of ' + settings.itemLength + ':</h3>');
                    accessible.append('<p>' + activity.find('.item').eq(i).find('p').html() + '</p>');

                    if(settings.type === 'tickandcross') {

                        accessible.append('<p><strong>' + settings.thoughtsText + '</strong></p>');
                        // accessible.append(activity.find('.item').eq(i).find('.itemFeedback').eq(0).html());

                        if(settings.hasCorrectAnswers) {
                            accessible.append(activity.find('.item').eq(i).find('.itemFeedback').find('.fb-tick').parent().html());
                        } else {

                            accessible.append(activity.find('.item').eq(i).find('.itemFeedback').eq(0).html());
                        }
                    }

                    if(i !== settings.itemLength-1) {
                        accessible.append('<hr />');
                    }
                }

                accessible.find('span.accessibleRemove, .fb-cross, .fb-tick').remove();
            }

            if(settings.feedbackAfter) {

                accessible.next('.feedbackWrapper').find('button').attr('disabled', true);
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.classification = function( options ) {

        var activity = $(this), init, settings, initDragDrop, checkText = "Now check to find out if you're correct.", noItemsText = "No items.", accessible = '',

            item, items, columnWidth, columnBody, restartBtn, dragItem, dragHelper, dragOS, dropOS = [];

        initDragDrop = function() {

            item.draggable({
                revert: 'invalid',
                helper: function() {
                    var helper = $(this).clone(); 
                    // helper.css({'width': '30px', 'height': '30px', 'color':'transparent'});
                    return helper;
                },
                start: function(e, ui) {

                    dragItem = $(this);
                    dragItem.addClass('dragging');
                    
                    dragHelper = $(ui.helper);
                    dragOS = dragHelper.offset();

                    columnBody.each(function(index){

                        dropOS[index] = $(this).offset();
                    });
                },

                drag: function() {

                    dragOS = dragHelper.offset();

                    columnBody.each(function(index){

                        if(dragOS.left > dropOS[index].left && dragOS.top > dropOS[index].top && dragOS.left < dropOS[index].left + $(this).width() && dragOS.top < dropOS[index].top + $(this).height()) {

                            $(this).addClass('dropHover');

                        } else {

                            $(this).removeClass('dropHover');
                        }        
                    });
                },

                stop: function() {

                    if(settings.correctAnswersRequired) {

                        if(activity.find('.dropHover').length > 0) {

                            var columnID = activity.find('.dropHover').index('.columnBody');

                            if(columnID !== dragItem.data('id')) {

                                activity.find('.incorrectMarker').addClass('visible onTop');

                                setTimeout(function(){

                                    activity.find('.incorrectMarker').removeClass('visible');
                                }, 1000);

                                setTimeout(function(){

                                    activity.find('.incorrectMarker').removeClass('onTop');
                                }, 2000);
                            }
                        }
                    }

                    dragItem.removeClass('dragging');
                    columnBody.removeClass('dropHover');

                    // console.log()
                },

                cursorAt: {left: 15, top: 15},
                zIndex: 10000
            });

            if(settings.correctAnswersRequired) {

                for(i=0;i<settings.numColumns;i++) {

                    columnBody.eq(i).droppable({

                        accept: activity.find('.item[data-column="'+i+'"]')

                    });
                }

            } else {

                columnBody.droppable({
                    accept: item,
                });
            }

            columnBody.droppable({

                drop: function() {

                    dragItem.appendTo($(this));
                    dragItem.html(dragItem.data('short'));
                    $(this).removeClass('dropHover');

                    if(items.find('.item').length === 1) {

                        if(settings.feedbackAfter) {

                            accessible.next('.feedbackWrapper').find('button').attr('disabled', false);
                        }

                        restartBtn.attr('disabled', false);
                    }
                }
            });

            // item.shuffle();
        };

        restartActivity = function() {

            columnBody.find('.item').each(function(){
                $(this).html($(this).data('long'));
                $(this).appendTo(items);
            });

            items.find('.item').draggable('destroy');
            columnBody.droppable('destroy');
            items.find('.item').shuffle();
            item = items.find('.item');

            initDragDrop();

            $(this).attr('disabled', true);
        };
            
        init = function() {

            settings = $.extend({
                numColumns: activity.find('.columnHead').length,
                correctAnswersRequired: false,
                itemText: 'Items:',
                itemLength: activity.find('.item').length,
                feedbackAfter: false,
                listItemsInAccessible: true

            }, options);

            items = activity.find('.items');
            items.find('.item').shuffle();
            item = items.find('.item');
            columnBody = activity.find('.columnBody');
            columnHead = activity.find('.columnHead');

            restartBtn = activity.find('button.restart');
            restartBtn.on(clickEvent, restartActivity).attr('disabled', true);

            columnWidth = (100 / settings.numColumns) + '%';

            columnHead.css({
                'width': columnWidth
            });

            columnBody.css({
                'width': columnWidth
            });

            item.each(function(){

                $(this).data('long', $(this).html());
            });

            columnBody.eq(0).addClass('borderLeft');

            initDragDrop();

            setMaxHeightOfElement(activity, item);
            setMaxHeightOfElement(activity, columnHead);

            //calculate height of columns

            var itemsHeight = getMaxHeightOfElement(activity, item);
            itemsHeight += 20; //added padding
            items.height(itemsHeight);

            var colMax = 0;

            if(settings.correctAnswersRequired) {

                for(i=0;i<settings.numColumns;i++) {

                    if(activity.find('.item[data-column="'+i+'"]').length > colMax) {
                        colMax = activity.find('.item[data-column="'+i+'"]').length;
                    }
                }

            } else {

                colMax = Math.ceil(settings.itemLength / settings.numColumns);
            }

            columnBody.height((colMax*itemsHeight) + columnHead.height() + 10 + 'px');

            if(settings.correctAnswersRequired) {
                activity.append('<div class="incorrectMarker"></div>');
            }

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            if(settings.correctAnswersRequired) {

                if(settings.listItemsInAccessible) {
                    accessible.append('<h3>'+settings.itemText+'</h3>');
                    accessible.append('<ul></ul>');

                    for(i=0;i<settings.itemLength;i++) {
                        accessible.find('ul').eq(0).append(
                            '<li>' +
                            item.eq(i).find('p').text() +
                            '</li>'
                        );
                    }

                    accessible.append('<hr />');
                    accessible.append('<p>'+checkText+'</p>');
                    accessible.append('<hr />');
                }

                for(i=0;i<settings.numColumns;i++) {

                    accessible.append('<h3>'+columnHead.eq(i).find('p').text()+'</h3>');
                    accessible.append('<ul></ul>');
                }

                for(i=0;i<settings.itemLength;i++) {

                    var temp = item.eq(i).data('column');

                    if(settings.listItemsInAccessible) {
                        temp++;
                    }

                    accessible.find('ul').eq(temp).append(
                        '<li>' +
                            item.eq(i).find('p').text() +
                        '</li>' 
                    );
                }

            } else {

                accessible.append('<ul></ul>');

                for(j=0;j<settings.itemLength;j++) {
                    accessible.find('ul').append(
                        '<li>' + 
                        activity.find('.item').eq(j).find('p').html() + 
                        '</li>'
                    );
                }
            }

            if(settings.feedbackAfter) {

                accessible.next('.feedbackWrapper').find('button').attr('disabled', true);
            }

        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.cloze = function( options ) {

        var activity = $(this), settings, init, accessible, optionsArray = [], dropDown, screensWrapper, _screen, nextBtn, backBtn, restartBtn, moveScreens, addedExtraOption = false;

        moveScreens = function(e) {
            nextBtn.attr('disabled', true);

            if(e.data.restart) {
                $(this).attr('disabled', true);

                addedExtraOption = false;

                if(settings.globalOptions) {

                    _screen.each(function(index){
                        var screenIndex = index;
                        var scr = $(this);
                        var tempArray = [];

                        $(this).find('select').each(function(){
                            tempArray.push($(this).attr('name'));
                        })

                        tempArray.sort();

                        for(name in tempArray) {
                            scr.find('select').append('<option value="'+tempArray[name]+'">'+tempArray[name]+'</option>');
                        }

                        $(this).find('span').hide();
                        $(this).find('select').show().val('');
                    });
                
                } else {

                    _screen.each(function(index){
                        var screenIndex = index;
                        $(this).find('span').hide();
                        $(this).find('select').show().val('');
                    });
                }
            }

            if(settings.multiScreen) {
                slideElements(activity, screensWrapper, e.data.inc, settings, distanceBetweenScreens);
            }

            if(_screen.eq(settings.current).find('select:visible').length === 0) {

                if(settings.current === settings.screenLength-1) {
                    restartBtn.attr('disabled', false);
                } else {
                    nextBtn.attr('disabled', false);
                }
            }
        };

        dropDownChange = function() {

            var thisIndex = $(this).index('select');

            var dropDown = $(this);

            if(this.value === this.name) {

                if(settings.globalOptions) {
                    _screen.eq(settings.current).find("option[value='"+this.name+"']").remove();
                } 

                $(this).hide();
                $(this).next('span').show();

            } else {
                $(this).addClass('incorrect');

                setTimeout(function(){
                    dropDown.removeClass('incorrect');
                    dropDown.val('');
                }, 500);
            }

            if(_screen.eq(settings.current).find('select:visible').length === 0) {

                var button = (settings.current === settings.screenLength-1 ? restartBtn : nextBtn);
                button.attr('disabled', false);
            }

            if(activity.hasClass('sll_2_50_cloze') && this.name === 'to' && !addedExtraOption) {

                activity.find('select').append('<option value="to">to</option>');
                addedExtraOption = true;
            }
        }

        generateOptions = function(eachScreen, screenIndex) {

            optionsArray[screenIndex] = [];

            if(settings.globalOptions) {

                eachScreen.find('span').each(function(index){
                    $(this).after('<span class="correct">'+$(this).html()+'</span>');
                    $(this).next('span').hide();
                    optionsArray[screenIndex][index] = $(this).text();

                    if($(this).hasClass('distractor')) {
                        $(this).replaceWith('<select class="distractor" name="'+$(this).text()+'"></select>');
                    } else {
                        $(this).replaceWith('<select name="'+$(this).text()+'"></select>');
                    }
                });

                optionsArray[screenIndex].sort();
                var drop = eachScreen.find('select');
                drop.append('<option></option>');

                for(var option in optionsArray[screenIndex]) {
                    var thisOption = optionsArray[screenIndex][option];
                    drop.append('<option value="'+ thisOption+'">' + thisOption + '</option>');
                }

            } else {

                eachScreen.find('span.options').each(function(dropDownIndex){

                    //determine correct answer and generate element after
                    $(this).after('<span class="correct">'+$(this).find('span[data-correct="true"]').html()+'</span>');
                    $(this).next('span').hide();
                    optionsArray[screenIndex][dropDownIndex] = [];

                    $(this).find('span').each(function(optionIndex){
                        optionsArray[screenIndex][dropDownIndex][optionIndex] = $(this).text();
                    })

                    // $(this).replaceWith('<select name="'+optionsArray[screenIndex][dropDownIndex][0]+'"></select>');
                    if($(this).hasClass('distractor')) {
                        $(this).replaceWith('<select class="distractor" name="'+$(this).find('span[data-correct="true"]').html()+'"></select>');
                    } else {
                        $(this).replaceWith('<select name="'+$(this).find('span[data-correct="true"]').html()+'"></select>');
                    }
                    optionsArray[screenIndex][dropDownIndex].sort();
                    var drop = eachScreen.find('select').eq(dropDownIndex);
                    drop.append('<option></option>');

                    for(var option in optionsArray[screenIndex][dropDownIndex]) {
                        var thisOption = optionsArray[screenIndex][dropDownIndex][option];
                        drop.append('<option value="'+ thisOption+'">' + thisOption + '</option>');
                    }
                });
            }

            optionsArray = [];
        }

        init = function() {

            settings = $.extend({
                removeAnswers: true,
                multiScreen: false,
                dropDownLength: [],
                globalOptions: true,
                screenLength: activity.find('.screen').length,
                current: 0
            }, options);

            //vars and handlers
            screensWrapper = activity.find('.screens');
            _screen = screensWrapper.find('.screen');
            nextBtn = activity.find('button.next');
            backBtn = activity.find('button.back');
            restartBtn = activity.find('button.restart');
            nextBtn.on(clickEvent, {inc:1}, moveScreens).attr('disabled', true);
            backBtn.on(clickEvent, {inc:-1}, moveScreens).attr('disabled', true);
            restartBtn.on(clickEvent, {inc:0, restart:true}, moveScreens).attr('disabled', true);

            //generate dropdown boxes
            _screen.each(function(index){
                var screenIndex = index;
                settings.dropDownLength[index] = $(this).find('span').length
                generateOptions($(this), screenIndex);
            });

            //remove dropdown when answered correctly
            if(settings.removeAnswers) {
                dropDown = activity.find('select');
                dropDown.on('change', dropDownChange);
            }

            //generate progress bar
            if(settings.multiScreen) {
                activity.append('<div class="progressBar"></div>');  
                createProgressBar(activity, settings.screenLength);
                distanceBetweenScreens = getDistanceBetweenElements(_screen);
            }

            //generate accessible version
            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');
            // accessible.append('<ul></ul>');

            _screen.each(function(index){

                accessible.append($(this).html());



                if(index !== settings.screenLength-1) {

                    accessible.append('<hr />');
                }

            });

            accessible.find('select').each(function(){

                if(!$(this).hasClass('distractor')) {
                    $(this).replaceWith($(this).attr('name'));
                } else {
                    $(this).remove();
                }
            });

            // for(var i=0;i<activity.find('.item').length;i++) {
            //     accessible.append(activity.find('.item').eq(i).html());
            // }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.comic = function( options ) {

        var activity = $(this), backBtn, init, moveComic, nextBtn, settings, image, accessible;
        
        moveComic = function(e) {

            if(e.data.inc === 1 && settings.current < settings.coordinateLength-1 || e.data.inc === -1 && settings.current > 0) {

                settings.current += e.data.inc;

                if(Modernizr.csstransitions) {
                    image.css({
                        left: settings.coordinates[settings.current].x + 'px',
                        top: settings.coordinates[settings.current].y + 'px'
                    });
                } else {
                    image.animate({
                        left: settings.coordinates[settings.current].x + 'px',
                        top: settings.coordinates[settings.current].y + 'px'
                    }, 500);
                }

                updateProgressBar(activity, settings.current, e.data.inc);
            }

            if(e.data.inc === 1 && settings.current === 1) {
                backBtn.attr('disabled', false);
            }            

            if(e.data.inc === 1 && settings.current === settings.coordinateLength-1) {
                nextBtn.attr('disabled', true);
            }

            if(e.data.inc === -1 && settings.current === 0) {
                backBtn.attr('disabled', true);
            }

            if(e.data.inc === -1 && settings.current === settings.coordinateLength-2) {
                nextBtn.attr('disabled', false);
            }
        };

        init = function() {
            // Establish default settings and 
            // override with options param (set in html)
            settings = $.extend({
                current:0,
                img: 'http://placehold.it/400/400',
                coordinates:[
                    {x: 10, y:10},
                    {x: 20, y:10},
                    {x: 30, y:10},
                    {x: 40, y:10}
                ],
                coordinateLength: 1
            }, options);

            settings.coordinateLength = settings.coordinates.length;

            image = activity.find('.comicImage');
            image.append('<img src="'+settings.img+'" />');
            image.css({
                'left': settings.coordinates[0].x + 'px',
                'top': settings.coordinates[0].y + 'px'
            });
            nextBtn = activity.find('.next');
            backBtn = activity.find('.back');
            nextBtn.on(clickEvent, {inc: 1}, moveComic);
            backBtn.on(clickEvent, {inc: -1}, moveComic).attr('disabled', true);

            activity.append('<div class="progressBar"></div>');
            createProgressBar(activity, settings.coordinateLength);

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            accessible.append('<p class="alert">DISCUSS WITH EC</p>');

        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.dragDrop = function( options ) {

        var activity = $(this), init, settings, accessible, dragItem, dropZone, initDragDrop, checkAnswers, tryAgain/*, numDragged = 0*/, correctAnswerText = "The correct pairings are listed below:",

        dragHelper, dragOS, currentDrag, dropOS = [],

        checkAnswersBtn, seeAnswersBtn, tryAgainBtn, restartBtn;

        checkAnswers = function() {

            $(this).attr('disabled', true);
            tryAgainBtn.attr('disabled', false);
            seeAnswersBtn.attr('disabled', false);
            restartBtn.attr('disabled', false);

            dropZone.each(function(){

                if($(this).data('drop') === $(this).find('.drag').data('drop')) {
                    $(this).find('.drag').addClass('correct');
                } else {
                    $(this).find('.drag').addClass('incorrect');
                }
            });

            if(activity.find('.drag.correct').length === settings.numDrags) {

                tryAgainBtn.attr('disabled', true);
                seeAnswersBtn.attr('disabled', true);
            }

            dragItem.each(function(index){

                $(this).draggable({ disabled: true });
            });
        };

        tryAgain = function() {

            for(i=0;i<settings.numDrags;i++) {

                if(!dragItem.eq(i).hasClass('correct')) {
                    
                    dragItem.eq(i).removeClass('correct incorrect').appendTo(activity.find('.drags'));
                    dragItem.eq(i).draggable({ disabled: false });
                } else {

                    dragItem.eq(i).draggable({ disabled: true });
                }
            }

            checkAnswersBtn.attr('disabled', true);
            $(this).attr('disabled', true);
            seeAnswersBtn.attr('disabled', true);
            restartBtn.attr('disabled', true);

            //bug fix
            activity.find('.dropHover').removeClass('dropHover');
        };

        seeAnswers = function() {

            $(this).attr('disabled', true);
            tryAgainBtn.attr('disabled', true);

            dragItem.each(function(index){

                activity.find('.drag[data-drop="'+index+'"]').appendTo(activity.find('.drop[data-drop="'+index+'"]')).removeClass('incorrect').addClass('correct');

                $(this).draggable({ disabled: true });
            });

        };

        restartActivity = function() {

            for(i=0;i<settings.numDrags;i++) {

                dragItem.eq(i).removeClass('correct incorrect').appendTo(activity.find('.drags'));
                dragItem.eq(i).draggable({ disabled: false });
            }

            checkAnswersBtn.attr('disabled', true);
            tryAgainBtn.attr('disabled', true);
            seeAnswersBtn.attr('disabled', true);
            restartBtn.attr('disabled', true);

            //bug fix
            activity.find('.dropHover').removeClass('dropHover');
        };

        initDragDrop = function() {

            dragItem.draggable({
                zIndex: 10000,
                cursorAt: {left: 15, top: 15},
                revert: 'invalid',
                helper: function() {
                    var helper = $(this).clone();
                    // helper.css({'color':'transparent'});
                    return helper;
                },

                start: function(e, ui) {
                    dragHelper = $(ui.helper);
                    dragOS = dragHelper.offset();

                    currentDrag = $(this);
                    currentDrag.addClass('dragging');

                    dropZone.each(function(index){

                        dropOS[index] = $(this).offset();
                    });
                },

                drag: function() {

                    dragOS = dragHelper.offset();

                    dropZone.each(function(index){

                        if(dragOS.left > dropOS[index].left && dragOS.top > dropOS[index].top && dragOS.left < dropOS[index].left + $(this).width() && dragOS.top < dropOS[index].top + $(this).height()) {

                            $(this).addClass('dropHover');

                        } else {

                            $(this).removeClass('dropHover');
                        }        
                    });
                },

                stop: function() {
                    currentDrag.removeClass('dragging');
                }
            });

            dropZone.droppable({
                accept: dragItem,
                drop: function() {

                    if($(this).find('.drag').length === 0) {

                        currentDrag.removeClass('dragging');
                        currentDrag.appendTo($(this));

                        if(activity.find('.drags').find('.drag').length === 1) {
                            checkAnswersBtn.attr('disabled', false);
                        }
                    }                   
                }
            });
        };
        
        init = function() {

            settings = $.extend({

                numDrags: activity.find('.drag').length,
                leftHeading: '[LEFT HEADING]',
                rightHeading: '[RIGHT HEADING]',
                matchText:":"
                
            }, options);

            dragItem = activity.find('.drag');

            dropZone = activity.find('.drop');
            checkAnswersBtn = activity.find('button.checkAnswers');
            tryAgainBtn = activity.find('button.tryAgain');
            seeAnswersBtn = activity.find('button.seeAnswers');
            restartBtn = activity.find('button.restart');

            checkAnswersBtn.on(clickEvent, checkAnswers);
            tryAgainBtn.on(clickEvent, tryAgain);
            seeAnswersBtn.on(clickEvent, seeAnswers);
            restartBtn.on(clickEvent, restartActivity);

            checkAnswersBtn.attr('disabled', true);
            tryAgainBtn.attr('disabled', true);
            seeAnswersBtn.attr('disabled', true);
            restartBtn.attr('disabled', true);

            initDragDrop();

            activity.after('<div class="accessible"></div>');
            // accessible = activity.next('.accessible');

            // for(i=0;i<settings.numDrags;i++) {

            //     accessible.append('<h2>' + activity.find('.drag[data-drop="'+i+'"]').html() + '</h2>');
            //     accessible.append('<p>' + activity.find('.response').eq(i).html() + '</p>');

            //     if(i !== settings.numDrags-1) {
            //         accessible.append('<hr />');
            //     }
            // }

            accessible = activity.next('.accessible');

            accessible.append('<div class="column"><h3>'+settings.leftHeading+'</h3><ul></ul></div>');
            accessible.append('<div class="column"><h3>'+settings.rightHeading+'</h3><ul></ul></div>');
            accessible.append('<hr /><h3>' + correctAnswerText + '</h3>');

            accessible.append('<ul></ul>');

            for(i=0;i<activity.find('.drag').length;i++) {

                accessible.find('.column').eq(0).find('ul').append('<li>' + activity.find('.drag').eq(i).html() + '</li>');
                accessible.find('.column').eq(1).find('ul').append('<li>' + activity.find('.response').eq(i).find('p').html() + '</li>');

                accessible.find('ul').eq(2).append('<li><strong>' + activity.find('.drag[data-drop="'+i+'"]').find('p').html() + '</strong>' + settings.matchText + ' ' + activity.find('.response').eq(i).find('p').html() + '</li>');
            }
            
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.flipper = function( options ) {

        var activity = $(this), backBtn, element, distanceBetweenScreens, init, moveScreens, nextBtn, _screen, screensWrapper, settings, scrolling, accessible,

            leftPos, topPos;

        moveScreens = function(e) {

            slideElements(activity, screensWrapper, e.data.inc, settings, distanceBetweenScreens);

            if(settings.current === settings.screenLength-1) {
                nextBtn.attr('disabled', true);
            } else {
                nextBtn.attr('disabled', false);
            }
        };

        clickElement = function() {

            var _this = $(this);

            //IF GRAPHIC OR TEXT
            if(settings.type === 'graphic' || settings.type === 'text') {

                if(!scrolling) {

                    //TEXT
                    if(settings.type === 'text') {

                        if(_this.hasClass('flipped')) {
                            //FLIP BACK
                            _this.removeClass('flipped');
                            _this.find('.back').scrollTop(0);
                        } else {
                            //VIEW FB
                            var flipped = _screen.find('.flipped');
                            flipped.removeClass('flipped');
                            _this.addClass('flipped');

                            var pos = _this.position();
                            leftPos = pos.left;
                            topPos = pos.top;
                        }

                    //GRAPHIC
                    } else {

                        //FLIP BACK
                        if(_this.hasClass('flipped')) {

                            _this.removeClass('flipped');
                            _this.find('.back').scrollTop(0);

                            _this.css('left', leftPos + 'px');
                            _this.css('top', topPos + 'px');
                            _this.css('zIndex', 1);

                        } else {

                            var flipped = _this.parent().find('.flipped');
                            flipped.removeClass('flipped');

                            flipped.css('left', leftPos + 'px');
                            flipped.css('top', topPos + 'px');
                            flipped.css('zIndex', 1);

                            _this.addClass('flipped');

                            var pos = _this.position();
                            leftPos = pos.left;
                            topPos = pos.top;

                            if(leftPos < 100) {
                                _this.css('left', '100px');
                            }

                            if(leftPos > (activity.width()-100)) {
                                _this.css('left', (activity.width()-120) + 'px');
                            }

                            if(topPos < _this.find('.back').height()/2) {
                                _this.css('top', _this.find('.back').height()/2);
                            }

                            if(topPos > activity.height()-(_this.find('.back').height()/2)) {
                                _this.css('top', (activity.height()-(_this.find('.back').height()/2) - 20) + 'px');
                            }

                            _this.css('zIndex', 2);
                        }
                    }

                    //flip back
                    
                } 

            //flashcards
            } else {

                if(settings.type === 'text') {

                    if(_this.hasClass('flipped')) {
                        _this.removeClass('flipped');
                    } else {
                        var flipped = _screen.find('.flipped');
                        flipped.removeClass('flipped');
                        _this.addClass('flipped');
                    }

                } else {
                    _this.toggleClass('flipped');
                }
            }
        };
            
        init = function() {

            settings = $.extend({
                // graphic: false,
                type: 'cards',
                multiScreen: false,
                screenLength: activity.find('.screen').length,
                current: 0,
                height: 400,
                img: ['http://placehold.it/540x600'],
                coordinates:[
                    {x: 10, y:10},
                    {x: 20, y:10},
                    {x: 30, y:10},
                    {x: 40, y:10}
                ],
                itemText: 'Example',
                screenText: 'Screen',
                cardLength: []
            }, options);

            screensWrapper = activity.find('.screens');
            _screen = activity.find('.screen');
            nextBtn = activity.find('button.next');
            backBtn = activity.find('button.back');
            nextBtn.on(clickEvent, {inc:1}, moveScreens);
            backBtn.on(clickEvent, {inc:-1}, moveScreens);
            backBtn.attr('disabled', true);

            if(settings.type === 'graphic') {

                element = activity.find('.point');

                // apply background image if necessary
                if(settings.type === 'graphic') {
                    _screen.each(function(index) {
                        $(this).css('background', 'url('+settings.img[index]+')');
                    });

                    element.each(function(index) {

                        var _index, _this = $(this);
                        _index = activity.find('.point').index(_this);

                        console.log(_index);

                        _this.css({
                            left: settings.coordinates[_index].x,
                            top: settings.coordinates[_index].y
                        });

                        var back  = $(this).find('.back');
                        back.css('top', (back.height()/2 - $(this).height()/2)*-1);
                    });

                } else {
                    element.addClass('inline');
                }

                if(settings.type === 'graphic') {
                    _screen.height(settings.height);
                }

            } else {
                element = activity.find('.card');
            }

            element.on(clickEvent, clickElement);

            //check to see if user is scrolling 
            // on a touch screen and set a variable

            element.on("touchmove", function(){
                scrolling = true;
            });

            element.on("touchend", function(){
                scrolling = false;
            });

            if(settings.multiScreen) {
                activity.append('<div class="progressBar"></div>');
                createProgressBar(activity, settings.screenLength);
                distanceBetweenScreens = getDistanceBetweenElements(_screen);
            }

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            var i, j;

            for(i=0;i<settings.screenLength;i++) {

                //add in screen header if screen length is greater
                //than one

                if(settings.screenLength !== 1) {
                    accessible.append('<h1>'+ settings.screenText + ' ' + (i+1) + ' of ' + settings.screenLength + '</h1>');
                }

                if(settings.type === 'graphic') {
                    settings.cardLength[i] = _screen.eq(i).find('.point').length;

                } else {
                    settings.cardLength[i] = _screen.eq(i).find('.card').length;
                }

                for(j=1;j<=settings.cardLength[i];j++) {

                    if(settings.type !== 'graphic') {
                        accessible.append('<h3>'+settings.itemText + ' ' + j + ' of ' + settings.cardLength[i] + ':</h3>');
                        accessible.append(_screen.eq(i).find('.face.front').eq(j-1).html());
                    } 

                    accessible.append(_screen.eq(i).find('.back').eq(j-1).html());

                    if(j !== settings.cardLength[i]) {
                        accessible.append('<hr />');
                    }
                }

                if(i !== settings.screenLength-1) {
                    accessible.append('<hr class="accessibleScreenBreak" />');
                }
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.labelledText = function( options ) {

        var activity = $(this), init, settings, accessible, feedback, clickLink, link, nextBtn, backBtn, screensWrapper, _screen, screenHeight, atEnd, atStart;

        clickLink = function() {

            var thisLink = $(this);
            var thisClass; 
            var thisIndex = activity.find('span').index(this);

            feedback.removeClass('shown invisible');
            link.removeClass('selected');

            if(!thisLink.hasClass('selected')) {

                if(settings.categories) {
                    thisClass = '.'+thisLink.attr('class');
                    activity.find(thisClass).addClass('selected');
                    var catNum = Number(thisClass.charAt(4));
                    feedback.eq(catNum).addClass('shown');

                } else {
                    thisLink.addClass('selected');
                    feedback.eq(thisIndex).addClass('shown');
                }
            }
        };

        moveScreens = function(e) {

            settings.current += e.data.inc;

            screensWrapper.css({
                top: (settings.current * screenHeight * -1) + 'px'
            });

            atEnd = (settings.current === settings.screenLength-1);
            atStart = (settings.current === 0);
            nextBtn.attr('disabled', atEnd);
            backBtn.attr('disabled', atStart);

            updateProgressBar(activity, settings.current, e.data.inc);
        };
        
        init = function() {

            settings = $.extend({
                screenLength: activity.find('.screen').length,
                current: 0,
                multiScreen: false,
                categories: false
            }, options);

            screensWrapper = activity.find('.screens');
            _screen = screensWrapper.find('.screen');
            nextBtn = activity.find('button.next');
            backBtn = activity.find('button.back');
            link = activity.find('.item span');

            nextBtn.on(clickEvent, {inc: 1}, moveScreens);
            backBtn.on(clickEvent, {inc: -1}, moveScreens).attr('disabled', true);

            link.on(clickEvent, clickLink);

            feedback = activity.find('.item.more');
            feedback.eq(0).addClass('shown invisible');

            activity.append('<div class="shadow"></div>');

            if(settings.multiScreen) {
                activity.append('<div class="progressBar"></div>');  
                createProgressBar(activity, settings.screenLength);
            }

            setMaxHeightOfElement(activity, _screen);
            screenHeight = _screen.height()
            screensWrapper.height(screenHeight);
            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            for(i=0;i<activity.find('.item').length;i++) {

                // if(i === 0) {
                //     accessible.append('<div class="block">' + activity.find('.item').eq(i).html() + '</div>');
                // } else {
                //     accessible.append(activity.find('.item').eq(i).html());
                // }

                // if(i !== activity.find('.item').length-1) {
                //     accessible.append('<hr />');
                // }

                accessible.append('<p>ACCESSIBLE VERSION NEEDED</p>')
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.ladderSteps = function( options ) {

        var activity = $(this), feedback, feedbackWrapper, init, label, number, step, stepWrapper, settings, stepsWrapper, accessible;
        
        clickStep = function() {

            var _this = $(this),
            visibleFeedback = activity.find('.ladderFeedback.visible'),
            selectedStep = activity.find('.step.selected');

            if(_this.hasClass('available')) {

                if(!Modernizr.csstransitions) {

                    visibleFeedback.animate({
                        left: activity.width()
                    }, 500);

                    feedback.eq(_this.index()).animate({
                        left: 0
                    }, 500);
                }

                visibleFeedback.toggleClass('visible hidden');
                feedback.eq(_this.index()).toggleClass('hidden visible');

                selectedStep.removeClass('selected');
                _this.addClass('selected');
            }

            if(settings.flipped) {

                if(_this.index() === activity.find('.available').last().index() && _this.index() !== settings.stepLength) {
                    _this.next('.step').addClass('available');
                }
            } else {

                if(_this.index() === activity.find('.available').first().index() && _this.index() !== 0) {
                    _this.prev('.step').addClass('available');
                }
            }
        };

        init = function() {

            settings = $.extend({
                flipped: false,
                stepLength: activity.find('.step').length,
                start: activity.find('.step').length-1,
                end: 0
                
            }, options);

            if(settings.flipped) {

                var temp;
                temp = settings.start;
                settings.start = settings.end;
                settings.end = temp;
            }

            //set vars
            stepWrapper = activity.find('.steps');
            step = stepWrapper.find('.step');
            label = step.find('.label');
            number = step.find('.number');
            feedback = activity.find('.ladderFeedback');
            activity.height(activity.height());
            // feedback.height(activity.height());
            
            feedback.addClass('hidden');
            step.eq(settings.start).addClass('available');

            step.on(clickEvent, clickStep);

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            var i, start, end, inc;

            if(settings.flipped) {

                for (i=0;i<settings.stepLength;i++) {
                
                    accessible.append('<h3>' + label.eq(i).text() + '</h3>');
                    accessible.append(feedback.eq(i).html());

                    if(i !== settings.stepLength-1) {
                        accessible.append('<hr />');
                    }
                }

            } else {

                for (i=settings.stepLength-1;i>=0;i--) {
                
                    accessible.append('<h3>' + label.eq(i).text() + '</h3>');
                    accessible.append(feedback.eq(i).html());

                    if(i !== 0) {
                        accessible.append('<hr />');
                    }
                }
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.matching = function( options ) {

        var activity = $(this), init, settings, accessible, itemSelect, item, correctAnswerText = 'The correct pairings are listed below:', restartBtn;
            
        itemSelect = function() {

            var _this = $(this);

            _this.parent().find('.item.selected').removeClass('selected');
            _this.addClass('selected');

            if(activity.find('.item.selected').length === 2) {


                if(activity.find('.item.selected').eq(0).data('match') === activity.find('.item.selected').eq(1).data('match')) {

                    var sel = (settings.hasQuestion) ? '.question':'.nav';

                    activity.find(sel).after(

                        '<div class="pair">' +
                            '<div class="column">' + 
                                '<div class="item">' + activity.find('.item.selected').eq(0).html() + '</div>' +
                            '</div>' + 
                            '<div class="column">' + 
                                '<div class="item">' + activity.find('.item.selected').eq(1).html() + '</div>' +
                            '</div>' +
                        '</div>'
                    );

                    var leftItemHeight = activity.find('.pair').eq(0).find('.item').eq(0).height();
                    var rightItemHeight = activity.find('.pair').eq(0).find('.item').eq(1).height();

                    activity.find('.pair').eq(0).find('.item').height((leftItemHeight > rightItemHeight) ? leftItemHeight : rightItemHeight);

                    activity.find('.item.selected').removeClass('selected').hide();

                    if(activity.find('.pair').length === settings.pairLength) {
                        restartBtn.attr('disabled', false);
                    }

                } else {

                    activity.find('.item.selected').removeClass('selected');
                    activity.find('.incorrectMarker').addClass('visible onTop');

                    setTimeout(function(){

                        activity.find('.incorrectMarker').removeClass('visible');
                    }, 1000);

                    setTimeout(function(){

                        activity.find('.incorrectMarker').removeClass('onTop');
                    }, 2000);
                }
            }
        };

        restartActivity = function() {

            activity.find('.pair').remove();
            activity.find('.column .item').show();
            activity.find('.column').eq(1).find('.item').shuffle();
            $(this).attr('disabled', true);
        };
            
        init = function() {

            settings = $.extend({
                pairLength: activity.find('.column .item').length/2,
                matchText: ':',
                leftHeading: '[LEFT HEADING]',
                rightHeading: '[RIGHT HEADING]',
                hasQuestion: false
            }, options);

            activity.find('.column').eq(1).find('.item').shuffle();

            item = activity.find('.item');
            item.on(clickEvent, itemSelect);

            restartBtn = activity.find('button.restart');
            restartBtn.on(clickEvent, restartActivity).attr('disabled', true);

            activity.append('<div class="incorrectMarker"></div>');

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            accessible.append('<div class="column"><h3>'+settings.leftHeading+'</h3><ul></ul></div>');
            accessible.append('<div class="column"><h3>'+settings.rightHeading+'</h3><ul></ul></div><hr />');
            accessible.append('<h3>' + correctAnswerText + '</h3>');

            accessible.append('<ul></ul>');

            for(i=0;i<item.length/2;i++) {

                accessible.find('.column').eq(0).find('ul').append('<li>' + activity.find('.column').eq(0).find('.item').eq(i).html() + '</li>');
                accessible.find('.column').eq(1).find('ul').append('<li>' + activity.find('.column').eq(1).find('.item').eq(i).html() + '</li>');

                accessible.find('ul').eq(2).append('<li><strong>' + activity.find('.column').eq(0).find('.item').eq(i).text() + '</strong>' + settings.matchText + ' ' + activity.find('.column').eq(1).find('.item[data-match="'+i+'"]').text() + '</li>');
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.mcq = function( options ) {

        var activity = $(this), init, settings, accessible, nextBtn, backBtn, screensWrapper, _screen, feedback, selectAnswer, moreBtn, moreItem, score = 0,

        lettersArray = ['A', 'B', 'C', 'D', 'E'];

        selectAnswer = function() {

            var thisAnswer = $(this);

            thisAnswer.parent().find('.selected').removeClass('selected');
            thisAnswer.addClass('selected');

            var thisScreen = _screen.eq(settings.current);
            thisScreen.find('button.viewMore').attr('disabled', false);

        };
            
        moveScreens = function(e) {

            nextBtn.attr('disabled', true);

            if(settings.multiScreen) {

                slideElements(activity, screensWrapper, e.data.inc, settings, distanceBetweenScreens);
            }

            if(settings.scoring) {
                activity.find('.score span.tot').html(settings.current+1);
            }

            

            if(e.data.restart) {

                $(this).attr('disabled', true);

                activity.find('.selected').removeClass('selected');
                answer.removeClass('disabled');

                _screen.each(function(){
                    $(this).find('.item.more').addClass('hidden').hide().first().show();
                });

                moreBtn.show().attr('disabled', true);
                answer.on(clickEvent, selectAnswer);

                if(settings.scoring) {
                    score = 0;
                    activity.find('.score span.you').html(score);
                }

                if(settings.feedbackAfter) {

                    feedbackWrapper.find('.feedback h2').remove();
                    feedbackWrapper.find('.feedback').hide();

                    feedbackWrapper.find('button').html('feedback').attr('disabled', true);
                }
            }

            if(_screen.eq(settings.current).find('button.viewMore').css('display') === 'none') {

                if(settings.current !== settings.screenLength-1) {
                    nextBtn.attr('disabled', false);
                }
            }
        };

        viewFeedback = function() {

            var thisScreen = _screen.eq(settings.current);
            var selectedAnswer = thisScreen.find('.item.selected');

            //hide check answer button
            $(this).hide();

            //determine selected answer and show relevant feedback
            selectedIndex = selectedAnswer.index();
            thisScreen.find('.item.more').hide();
            thisScreen.find('.item.more').eq(selectedIndex).removeClass('hidden').show();

            //increment score if selected correctly
            if(selectedAnswer.data('correct') === true) {

                if(settings.scoring) {
                    score+=1;
                    activity.find('.score span.you').html(score);
                }
            }

            //disable all answer options
            thisScreen.find('.answers .item').off(clickEvent).addClass('disabled');

            /***********************************************************

            WORK IN PROGRESS */
            console.log(settings.current, ' = ', settings.screenLength-1);
            
            //enable final feedback if at final screen
            if(settings.current === settings.screenLength-1) {

                restartBtn.attr('disabled', false);

                if(settings.feedbackAfter) {

                    feedbackWrapper.find('.feedback').prepend('<h2>You scored '+ score + ' out of ' + settings.screenLength + '</h2>');

                    // activity.next('.feedbackWrapper').find('button').attr('disabled', false);
                    feedbackWrapper.find('button').attr('disabled', false);
                }
                
            } else {

                nextBtn.attr('disabled', false);
            }

            /***********************************************************/
            
        };
            
        init = function() {

            settings = $.extend({
                
                feedback: true,
                screenLength: activity.find('.screen').length,
                multiScreen: true,
                current: 0,
                scoring: true,
                checkAnswer: true,
                feedbackAfter: false,
                questionText: 'Question',
                variedFeedback: false
                // letteredAnswers: false

            }, options);

            screensWrapper = activity.find('.screens');
            _screen = screensWrapper.find('.screen');
            nextBtn = activity.find('button.next');
            backBtn = activity.find('button.back');
            restartBtn = activity.find('button.restart');
            feedback = _screen.find('.item.more');
            answer = activity.find('.answers .item');
            moreItem = activity.find('.item.more');
            moreItem.addClass('hidden');
            moreBtn = activity.find('button.viewMore');
            moreBtn.on(clickEvent, viewFeedback).attr('disabled', true);

            if(settings.feedbackAfter) {

                feedbackWrapper = activity.next('.feedbackWrapper');
                feedbackWrapper.find('button').attr('disabled', true);
            }

            nextBtn.on(clickEvent, {inc:1}, moveScreens).attr('disabled', true);
            backBtn.on(clickEvent, {inc:-1}, moveScreens).attr('disabled', true);
            restartBtn.on(clickEvent, {inc:0, restart:true}, moveScreens).attr('disabled', true);
            answer.on(clickEvent, selectAnswer);

            _screen.each(function(){
                $(this).find('.item.more').hide().first().show();

                var scr = $(this);

                scr.find('.answers').find('.item').each(function(index){
                    $(this).find('p').prepend(lettersArray[index] + ': ');
                });
            });

            if(settings.multiScreen) {
                activity.append('<div class="progressBar"></div>');  
                createProgressBar(activity, settings.screenLength);
                distanceBetweenScreens = getDistanceBetweenElements(_screen);
            }

            // if(settings.feedbackAfter) {

            //     activity.next('.feedbackWrapper').
            // }

            if(settings.scoring) {
                activity.find('.score span.tot').html(settings.current+1);
            }

            setMaxHeightOfElement(activity, activity.find('.question'));
            setMaxHeightOfElement(activity, activity.find('.answers'));
            setMaxHeightOfElement(activity, feedback);
            // setMaxHeightOfElement(activity, _screen);

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            for(i=0;i<settings.screenLength;i++) {

                accessible.append('<h2>' + settings.questionText + ' ' + (i+1) + ' of ' + settings.screenLength + ':</h2>');
                accessible.append(_screen.eq(i).find('.question').html());

                accessible.append('<ol></ol>');

                for(j=0;j<_screen.eq(i).find('.answers').find('.item').length;j++) {

                    accessible.find('ol').eq(i).append('<li>' + _screen.eq(i).find('.answers').find('.item').eq(j).find('p').html() + '</li>');
                }

                if(settings.variedFeedback) {

                    //list individual feedbacks

                } else {

                    var correctAnswer = _screen.eq(i).find('.item[data-correct="true"]').index();
                    accessible.append('<p><strong>Feedback:</strong></p>');

                    accessible.append('<p>The correct answer is ' + lettersArray[correctAnswer] + '.</p>');
                    accessible.append(_screen.eq(i).find('.item.more').eq(0).html());
                    accessible.find('span:not(.accessibleSwap), .fb-cross, .fb-tick').remove();
                 }

                 if(i !== settings.screenLength-1) {
                    accessible.append('<hr />');
                 }
            }            
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.mediaPlayer = function( options, data ) {

        var activity = $(this), init, settings, accessible, clickTrack, toggleTranscript, playAudioClip;

        clickTrack = function() {

            // console.log('reached here');
            if($('audio').length > 0) {
                console.log('pausing audio');
                $('audio')[0].pause();
            }
            
            // console.log('reached here');

            var thisIndex = $(this).index();

            if(settings.audioPlayer) {
                activity.find('audio').find('source').eq(0).attr('src', data[thisIndex][0].src + '.mp3');
                activity.find('audio').find('source').eq(1).attr('src', data[thisIndex][0].src + '.ogg');
                var a = activity.find('audio');
                a[0].load();
                a[0].play();
            } else {
                activity.find('iframe').attr('src', data[thisIndex][0].src + '?autoplay=1');
            }

            
            activity.find('.item.selected').removeClass('selected');
            $(this).addClass('selected');

            accessible.find('.transcriptBlock').hide().removeClass('selected').eq(thisIndex).show().addClass('selected');
        };

        playAudioClip = function() {

            var thisBtn = $(this);
            var player = $(this).next('audio')[0];
            player.load();

            $('audio').each(function() {
                if(!this.paused){
                    this.pause();
                }
            });

            if($(this).hasClass('playing')) {

                $('.mediaPlayer').each(function() {

                    if($(this).find('button').hasClass('playing')) {
                        $(this).find('button').removeClass('playing');
                    }
                })

                $(this).removeClass('playing');

            } else {

                $('.mediaPlayer').each(function() {

                    if($(this).find('button').hasClass('playing')) {
                        $(this).find('button').removeClass('playing');
                    }
                })

                $(this).addClass('playing');
                player.play();

            }

            player.onended = function() {
                thisBtn.removeClass('playing');
            } 
        }

        toggleTranscript = function() {

            $(this).next('.accessible').toggleClass('visible');

            if($(this).next('.accessible').hasClass('visible')) {
                $(this).text('hide transcript');
            } else {
                $(this).text('transcript');
            }
        };

        init = function() {

            settings = $.extend({
                videoSource: 'https://player.vimeo.com/video/101709565',
                audioSource: '../audio/epe_1_20_aud1',
                offline: false,
                multiPlayer: false,
                audioPlayer: false,
                videoInfo: data,
                transcript: true

            }, options);

            settings.videoSource = settings.videoInfo[0][0].src;
            settings.audioSource = settings.videoInfo[0][0].src;

            if(settings.multiPlayer) {
                activity.find('.item').on(clickEvent, clickTrack);
                activity.find('.item').eq(0).addClass('selected');
            }

            if(settings.audioPlayer) {
                activity.find('audio').find('source').eq(0).attr('src', settings.audioSource + '.mp3');
                activity.find('audio').find('source').eq(1).attr('src', settings.audioSource + '.ogg');

                activity.find('audio')[0].load();
                
            } else {
                activity.find('iframe').attr('src', settings.videoSource);
                activity.find('iframe').data('src', settings.videoSource);
                activity.find('.tracklist').addClass('video');
            }

            activity.find('button').on(clickEvent, playAudioClip);

            if(settings.transcript) {

                activity.after(
                '<div class="feedbackWrapper">' +
                    '<button class="viewTranscript">transcript</button>' +
                    '<div class="accessible"></div>' +
                '</div>');

                accessible = activity.next('.feedbackWrapper').find('.accessible');

                var transcriptBlock;

                //loop through tracks
                for(i=0;i<data.length;i++) {

                    if(settings.multiPlayer) {
                        if(settings.videoInfo[i][0].nameAsVideoTitle) {
                            activity.find('.item').eq(i).html(
                            '<img src="'+settings.videoInfo[i][0].thumb+'"/>' +
                            '<div class="videoTitle">' + 
                                '<p><strong>'+settings.videoInfo[i][0].name + '</strong><br /><em>' + settings.videoInfo[i][0].role + '</em></p>' +
                            '</div>');
                        } else {
                            activity.find('.item').eq(i).html(
                                '<img src="'+settings.videoInfo[i][0].thumb+'"/>' +
                                '<div class="videoTitle">' + 
                                    '<p><strong>'+settings.videoInfo[i][0].videoTitle + '</strong></p>' +
                                '</div>'
                            );
                        }
                    }

                    //generate new transcript block
                    accessible.append('<div class="transcriptBlock"></div>');
                    transcriptBlock = accessible.find('.transcriptBlock').eq(i);

                    //insert video title
                    if(settings.videoInfo[i][0].videoTitle) {
                        transcriptBlock.append('<h1>' + settings.videoInfo[i][0].videoTitle + '</h1>');
                    }

                    if(i===0) {
                        transcriptBlock.addClass('selected');
                    }


                    for(j=0;j<settings.videoInfo[i].length;j++) {

                        if(settings.videoInfo[i][j].question) {
                            transcriptBlock.append('<h3>' + settings.videoInfo[i][j].question + '</h3>');
                        }

                        if(settings.videoInfo[i][j].name && settings.videoInfo[i][j].role) {
                            transcriptBlock.append('<p><strong>' + settings.videoInfo[i][j].name + '</strong><br /><em>' + settings.videoInfo[i][j].role + '</em></p>');
                        }

                        transcriptBlock.append('<p>' + settings.videoInfo[i][j].transcript + '</p>');
                    }
                }

                accessible.find('.transcriptBlock').hide().first().show();

                // activity.after('<button class="viewTranscript">transcript</button>');
                activity.next('.feedbackWrapper').find('button.viewTranscript').on(clickEvent, toggleTranscript);
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.painting = function( options ) {

        var activity = $(this), catItem, clickItem, clickCategory, init, mainItem, selectedClass = "colour0", settings, restartActivity, mainItems, summaryBtn, restartBtn, viewSummary, complete, numItemsSelected, checkBtn, selectableBaseClass = '', complete;

        checkAnswers = function() {

            complete = true;
            
            activity.find('.selectable').each(function() {

                //if not correct, deselect
                if($(this).attr('class') !== selectableBaseClass + ' ' + $(this).data('colour')) {

                    if(!complete) complete = false;

                    $(this).attr('class', selectableBaseClass);
                }
            })

            if(complete) {
                checkBtn.attr('disabled', true)
            }
        };
        
        clickCategory = function() {
            var _this = $(this);
            
            activity.find('.item.selected').removeClass('selected');
            _this.addClass('selected');

            selectedClass = _this.attr('class').replace('item ', '').replace('selected', '');
        };

        clickItem = function() {

            var _this = $(this);

            _this.removeClass('colour0 colour1 colour2 colour3 colour4');

            if(activity.find('.'+selectedClass).length <= settings.limitPerColour) {
                _this.addClass(selectedClass);
            }

            complete = true;
            numItemsSelected = 0;

            for(i=0;i<settings.colourLength;i++) {

                numItemsSelected += activity.find('.items .selectable.colour'+i).length;
            }

            if(numItemsSelected < settings.limit) {
                complete = false;
            }

            if(complete) {

                if(settings.hasSummary) {
                    summaryBtn.attr('disabled', false);
                }

                if(settings.correctAnswersRequired) {

                    checkBtn.attr('disabled', false);
                }
                
                restartBtn.attr('disabled', false);

            } else {

                if(settings.hasSummary) {
                    summaryBtn.attr('disabled', true);
                }
            }
        };

        restartActivity = function() {
            activity.find('.items .selectable').removeClass('colour0 colour1 colour2 colour3 colour4');
            activity.find('.nav button').attr('disabled', true);
        };

        viewSummary = function() {

            var summaryText = '';

            summaryText += '<h2 class="bordered">' + settings.summaryIntro + '</h2>';

            for(i=0;i<settings.colourLength;i++) {

                var thisClass = activity.find('.items .colour'+i);
                summaryText += '<div class="bordered">';
                summaryText += '<h2>' + catItem.eq(i).find('p').text() + '</h2>';

                if(thisClass.length === 0) {

                    summaryText += '<p>No items selected for this category</p>';

                } else {

                    for(j=0;j<thisClass.length;j++) {

                        summaryText += thisClass.eq(j).html();
                    }
                }

                summaryText += '</div>';

                if(i !== settings.colourLength-1) {

                    summaryText += '<hr class="whiteRule" />';
                }
            }

            activitySummary($('html'), activity, summaryText);
        };

        init = function() {

            // Establish default settings and 
            // override with options param (set in html)
            settings = $.extend({

                //set limit to number of items by default (i.e, no limit)
                limit: activity.find('.items .selectable').length,
                limitPerColour: activity.find('.items .selectable').length,
                hasSummary:false,
                colourLength: activity.find('.categories .item').length,
                colourText: 'Categories',
                itemText: 'Items',
                summaryIntro: 'Here is a summary of your answers:',
                correctAnswersRequired: false

            }, options);

            mainItems = activity.find('.items');
            catItem = activity.find('.categories .item');
            mainItem = activity.find('.items').find('.selectable');
            restartBtn = activity.find('button.restart');
            checkBtn = activity.find('button.check');

            if(settings.hasSummary) {
                summaryBtn = activity.find('button.next');
                summaryBtn.on(clickEvent, viewSummary).attr('disabled', true);
            }

            catItem.each(function(){
                $(this).addClass('colour' + $(this).index());
            });

            catItem.on(clickEvent, clickCategory);
            mainItem.on(clickEvent, clickItem);
            checkBtn.on(clickEvent, checkAnswers).attr('disabled', true);
            restartBtn.on(clickEvent, restartActivity).attr('disabled', true);

            catItem.first().addClass('selected');
            // mainItem.shuffle();

            //get base classes to apply to incorrect items
            selectableBaseClass = mainItem.eq(0).attr('class');

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            accessible.append('<h2>'+settings.colourText+'</h2>');
            accessible.append('<ul></ul>');

            for(i=0;i<settings.colourLength;i++) {

                accessible.find('ul').append('<li>' + activity.find('.categories').find('.item').eq(i).find('p').html() +'</li>');
            }

            accessible.append('<h2>'+settings.itemText+'</h2>');

            accessible.append('<ul></ul>');

            for(i=0;i<settings.limit;i++) {

                accessible.find('ul').eq(1).append('<li>' + activity.find('.items').find('.selectable').eq(i).html() + '</li>');
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.paragraphSequencing = function( options ) {

        var activity = $(this), init, settings, items, item, checkAnswers, viewSummary, nextBtn, checkBtn, checkAnswer, seeBtn, seeAnswers, restartBtn, restartActivity;

        checkAnswers = function() {

            var classToAdd;

            item = activity.find('.items .item');

            for(i=0;i<settings.itemLength;i++) {

                classToAdd = (Number(item.eq(i).data('loc')) === item.eq(i).index()) ? 'correct':'incorrect';
                item.eq(i).addClass(classToAdd);
            }

            seeBtn.attr('disabled', false);
            restartBtn.attr('disabled', false);
        };

        seeAnswers = function() {

            // for(i=settings.itemLength-1;i>=0;i--) {

            //     activity.find('.item[data-loc="'+i+'"]').insertBefore(item.eq(0));
            // }

            var $wrapper = activity.find('.items');

            $wrapper.find('.item').sort(function (a, b) {
                return +a.dataset.loc - +b.dataset.loc;
            }).appendTo( $wrapper );

            item.addClass('correct').removeClass('incorrect');

            checkBtn.attr('disabled', true);
            $(this).attr('disabled', true);
            restartBtn.attr('disabled', false);
        };

        viewSummary = function() {

            var summaryText = '';

            summaryText += '<h2 class="bordered">You arranged the <span class="lowercase">'+settings.itemText + 's</span> in the following order:</h2>';

            for(i=0;i<settings.itemLength;i++) {

                summaryText += '<div class="bordered"><p>' + activity.find('.item').eq(i).text() + '</p></div>';
            }

            activitySummary($('html'), activity, summaryText);
        };

        restartActivity = function() {

            item.shuffle().removeClass('correct incorrect');
            seeBtn.attr('disabled', true);
            checkBtn.attr('disabled', false);
            $(this).attr('disabled', true);
        };

        init = function() {

            settings = $.extend({
                correctAnswersRequired: false,
                itemLength: activity.find('.item').length,
                itemText: 'Statement'
            }, options);

            item = activity.find('.items .item');
            item.shuffle();

            item.on('mousedown touchstart', function(){

                item.removeClass('correct incorrect');
            });

            if(settings.correctAnswersRequired) {
                checkBtn = activity.find('button.check');
                checkBtn.on(clickEvent, checkAnswers);
                seeBtn = activity.find('button.see').attr('disabled', true);
                seeBtn.on(clickEvent, seeAnswers);
                restartBtn = activity.find('button.restart');
                restartBtn.on(clickEvent, restartActivity).attr('disabled', true);
            } else {
                nextBtn = activity.find('button.next');
                nextBtn.on(clickEvent, viewSummary);
            }



            items = activity.find('.items');
            items.sortable({
                start: function(){
                    item.removeClass('correct incorrect');
                    if(settings.correctAnswersRequired) {
                        seeBtn.attr('disabled', true);
                        restartBtn.attr('disabled', true);
                    }
                }
            });

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            if(settings.correctAnswersRequired) {

                for(i=0;i<settings.itemLength;i++) {

                    accessible.append('<h3>' + settings.itemText + ' ' + (i+1) + ' of ' + settings.itemLength + ':</h3>');
                    accessible.append('<p>' + item.eq(i).text() + '</p>');

                    if(i !== settings.itemLength-1) {
                        accessible.append('<hr />');
                    }
                }

            } else {

                accessible.append('<ul></ul>');

                for(i=0;i<settings.itemLength;i++) {

                    accessible.find('ul').append(
                        '<li>' + item.eq(i).text() + '</li>'
                    );
                }
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.pcnt = function( options ) {

        var activity = $(this), backBtn, distanceBetweenScreens, init, item, introItem, moreBtn, moreItem, nextBtn, questionItem, restartBtn, _screen, screensWrapper, settings, viewMore, summaryBtn, inputBox, accessible, viewSummary;
            
        viewMore = function() {

            var _this = $(this);

            if(Modernizr.csstransitions) {
                _this.next('.item').removeClass('hidden');
            } else {
                _this.next('.item').animate({
                    opacity: 1
                }, 500).removeClass('hidden');
            }

            
            _this.hide();

            if(settings.current === settings.screenLength-1) {

                if(settings.printable) {
                    nextBtn.attr('disabled', false);
                }

                restartBtn.attr('disabled', false);

            } else {
                nextBtn.attr('disabled', false);
            }
        };

        moveScreens = function(e) {

            nextBtn.attr('disabled', true);

            if(e.data.restart) {

                slideElements(activity, screensWrapper, e.data.inc, settings, distanceBetweenScreens);
                $(this).attr('disabled', true);
                nextBtn.html('next');

                if(settings.printable) {
                    activity.find('textarea').val(defaultEntryText);
                }

                if(settings.feedback) {

                    nextBtn.attr('disabled', true);
                    moreBtn.show();
                    moreItem.addClass('hidden');

                    if(IE9) {
                        moreItem.css('opacity', 0);
                    }

                } else {
                    nextBtn.attr('disabled', false);
                }

            } else {

                if(settings.printable) {

                    if(settings.current === settings.screenLength-1 && e.data.inc === 1) {
                        viewSummary();
                        $(this).attr('disabled', false);

                    } else {
                        slideElements(activity, screensWrapper, e.data.inc, settings, distanceBetweenScreens);
                    }

                    //change button text if at final screen
                    if(e.data.inc === 1 && settings.current === settings.screenLength-1) {
                        nextBtn.html('view summary');
                    } else if(e.data.inc === -1 && settings.current === settings.screenLength-2) {
                        nextBtn.html('next');
                    }

                    if(settings.feedback) {

                        //notemaking
                        if(_screen.eq(settings.current).find('button.viewMore').css('display') === 'none') {
                            nextBtn.attr('disabled', false);
                        } 

                    } else {

                        //text entry
                        nextBtn.attr('disabled', false);

                        if(settings.current === settings.screenLength-1) {
                            restartBtn.attr('disabled', false);
                        }
                    }

                } else {

                    slideElements(activity, screensWrapper, e.data.inc, settings, distanceBetweenScreens);

                    if(settings.feedback) {

                        //ctvm
                        if(_screen.eq(settings.current).find('button.viewMore').css('display') === 'none') {
                            nextBtn.attr('disabled', false);
                        } 

                    } else {

                        //process
                        if(settings.current === settings.screenLength-1) {
                            nextBtn.attr('disabled', true);
                        } else {
                            nextBtn.attr('disabled', false);
                        }
                    }
                }
            }
        };

        viewSummary = function() {

            var summaryText = '';
            var thisScreen = activity.find('.screen');

            for(i=0;i<settings.screenLength;i++) {

                if(settings.question) {
                    summaryText +=  '<div class="bordered question">'+thisScreen.eq(i).find('.question').html() + '</div>';
                    // summaryText += '<h2>' + thisScreen.eq(i).find('.question').text() + '</h2>';
                }

                summaryText += '<div class="bordered"><h2>Your thoughts:</h2>';

                if(thisScreen.eq(i).find('textarea').val() === defaultEntryText) {
                    summaryText += '<p>No text entered</p>';
                } else {
                    summaryText += '<p>' + thisScreen.eq(i).find('textarea').val().replace( /\r?\n/g, "<br />" ) + '</p>';
                }

                summaryText += '</div>';

                if(settings.feedback) {

                    summaryText += '<div class="bordered">';
                    summaryText += '<h2>Our thoughts:</h2>';
                    summaryText += thisScreen.eq(i).find('.item.more').html();
                    summaryText += '</div>';
                }

                if(i !== settings.screenLength-1) {

                    summaryText += '<hr class="whiteRule" />';

                }
            }

            activitySummary($('html'), activity, summaryText);
        };

        init = function() {
            // Establish default settings and 
            // override with options param (set in html)
            settings = $.extend({
                multiScreen: true,
                feedback: false,
                question: false,
                printable: false,
                animation: true,
                screenLength: activity.find('.screen').length,
                current: 0,
                numberedScreensInAccessible: true,
                itemText: 'Item',
                thoughtsText: 'Our thoughts:'
            }, options);

            screensWrapper = activity.find('.screens');
            _screen = screensWrapper.find('.screen');
            nextBtn = activity.find('button.next');
            backBtn = activity.find('button.back');
            restartBtn = activity.find('button.restart');
            nextBtn.on(clickEvent, {inc:1}, moveScreens);
            backBtn.on(clickEvent, {inc:-1}, moveScreens);
            restartBtn.on(clickEvent, {inc:0, restart:true}, moveScreens).attr('disabled', true);
            questionItem = activity.find('.item.question');
            setMaxHeightOfElement(activity, questionItem);
            introItem = activity.find('.item.intro');
            setMaxHeightOfElement(activity, introItem);
            backBtn.attr('disabled', true);

            //ctvm and notemaking
            if(settings.feedback) {
                moreWrapper = activity.find('.moreWrapper');
                moreItem = moreWrapper.find('.item');
                moreBtn = activity.find('button.viewMore');
                setMaxHeightOfElement(activity, moreItem);
                // centreElement(moreBtn, moreWrapper);
                moreItem.addClass('hidden');

                if(IE9) {
                    moreItem.css('opacity', 0);
                }

                moreBtn.on(clickEvent, viewMore);
                nextBtn.attr('disabled', true);
            }

            if(settings.multiScreen) {
                activity.append('<div class="progressBar"></div>');  
                createProgressBar(activity, settings.screenLength);
                distanceBetweenScreens = getDistanceBetweenElements(_screen);

                
            }

            if(!settings.animation) {
                screensWrapper.addClass('no-animation');
            }

            if(settings.printable) {
                inputBox = activity.find('textarea');
                inputBox.html(defaultEntryText);
                textEntryFocus(inputBox, defaultEntryText);

                if(!settings.feedback) {

                    activity.find('.item.input').addClass('bottomBorder');
                }
            }

            // generate accessible version
            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            for(i=0;i<settings.screenLength;i++) {

                if(settings.screenLength > 1) {

                    if(settings.numberedScreensInAccessible) {
                        accessible.append('<h3>' + settings.itemText + ' ' + (i+1) + ' of ' + settings.screenLength + ':</h3>');
                    }
                }

                //notemaking and text entry
                if(settings.printable) {
                    accessible.append(
                    '<h3>' + activity.find('.screen').eq(i).find('.question').html() + '</h3>');
                
                //process and ctvm
                } else {
                    accessible.append(activity.find('.screen').eq(i).find('.item').eq(0).html());
                }

                //ctvm and notemaking
                if(settings.feedback) {
                    accessible.append('<p><strong>'+settings.thoughtsText+'</strong></p>' + activity.find('.screen').eq(i).find('.more').html());
                }

                if(!settings.multiScreen && !settings.printable) {
                    activity.find('.nav').addClass('collapsed');
                }

                if(i !== settings.screenLength-1) {

                    accessible.append('<hr />');
                }
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.pyramid = function( options ) {

        var activity = $(this), init, settings, feedback, step, clickStep;
        
        clickStep = function() {

            var _this = $(this),
                index = _this.index(),
                _thisFeedback = feedback.eq(index);

            feedback.removeClass('visible');
            _thisFeedback.addClass('visible').after('<div class="popupFeedbackShadow"></div>');
        };

        closeFeedback = function() {

            $(this).parent().next('.popupFeedbackShadow').remove();
            $(this).parent().removeClass('visible');
        };

        init = function() {

            // Establish default settings and 
            // override with options param (set in html)
            settings = $.extend({
                stepLength: activity.find('.step').length,
                invertedAccessible: false,
                upsideDown: false
            }, options);

            if(settings.upsideDown) {
                activity.addClass('upsideDown');
            }

            step = activity.find('.step');
            feedback = activity.find('.popupFeedback');

            var widthValue = 480, //divisible by 3, 4, 5 and 6
                heightValue = 360;

            if(settings.upsideDown) {

                console.log('upsideDown');

                for(h=settings.stepLength-1;h>=0;h--) {

                    step.eq(h).css({
                        //gets steeper with fewer steps
                        'border-bottom-width': heightValue/settings.stepLength, 
                        'border-left-width':widthValue/(settings.stepLength*2),
                        'border-right-width':widthValue/(settings.stepLength*2),
                        'width': (widthValue/settings.stepLength) * (settings.stepLength - h),
                        'margin-left': (widthValue/(settings.stepLength*2)) * settings.stepLength
                    }).addClass('step' + (settings.stepLength-h));
                    // }).addClass('step' + (h+1));


                    step.eq(h-(settings.stepLength-1)).find('span').css({
                        'top': heightValue/settings.stepLength/2 + 'px'
                    });
                }

            } else {

                for(h=0;h<settings.stepLength;h++) {

                    step.eq(h).css({
                        //gets steeper with fewer steps
                        'border-bottom-width': heightValue/settings.stepLength, 
                        'border-left-width':widthValue/(settings.stepLength*2),
                        'border-right-width':widthValue/(settings.stepLength*2),
                        'width': (widthValue/settings.stepLength) * (h+1),
                        'margin-left': (widthValue/(settings.stepLength*2)) * (settings.stepLength - (h+1))
                    }).addClass('step' + (h+1));

                    step.eq(h).find('span').css({
                        'top': heightValue/settings.stepLength/2 + 'px'
                    });
                }
            }

            

            step.on(clickEvent, clickStep);

            feedback.each(function() {

                $(this).append('<button>&times;</button>');
                $(this).find('div').prepend('<h3>' + step.eq($(this).index()-settings.stepLength).text() + '</h3>');
            });

            closeButton = feedback.find('button');
            closeButton.on(clickEvent, closeFeedback);

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            var i;

            for(i=0;i<settings.stepLength;i++) {

                if(settings.invertedAccessible) {
                    accessible.append(feedback.eq(settings.stepLength-(i+1)).find('div').html());
                } else {
                    accessible.append(feedback.eq(i).find('div').html());
                }

                if(i !== settings.stepLength-1) {
                    accessible.append('<hr />');
                }
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.reflection = function( options ) {

        var activity = $(this), init, settings, accessible, moveScreens, clickTab, inputBox, item,

        distanceBetweenScreens, screenReached = 0,

        screensWrapper, _screen, nextBtn, backBtn, restartBtn, tab;

        clickTab = function() {

            var thisScreen = $(this).parents().eq(1);

            thisScreen.find('.item').hide();
            thisScreen.find('.item').eq($(this).index()).show();

            thisScreen.find('.tab').removeClass('active');
            $(this).addClass('active');

            if($(this).index() === 2) {

                if(settings.current !== settings.screenLength-1) {

                    nextBtn.attr('disabled', false);

                } else {

                    if(settings.printable) {

                        nextBtn.attr('disabled', false);
                    }

                    if(settings.feedbackAfter) {

                        accessible.next('.feedbackWrapper').find('button').attr('disabled', false);
                    }

                    restartBtn.attr('disabled', false);
                }
            }
        };

        moveScreens = function(e) {

            if(e.data.inc === 0) {

                _screen.each(function(){

                    var _this = $(this);

                    _this.find('.item').hide();
                    _this.find('.tab').removeClass('active');
                    _this.find('.tab').eq(0).addClass('active');
                    _this.find('.item').eq(0).show();
                });

                screensReached = 0;
                // settings.current = 0;
                nextBtn.attr('disabled', true).text('next');
                $(this).attr('disabled', true);
                activity.find('textarea').val(defaultEntryText);
            }

            if(settings.printable) {

                if(settings.current === settings.screenLength-1 && e.data.inc === 1) {
                    viewSummary();
                    $(this).attr('disabled', false);

                } else {
                    slideElements(activity, screensWrapper, e.data.inc, settings, distanceBetweenScreens);
                }

                //change button text if at final screen
                if(e.data.inc === 1 && settings.current === settings.screenLength-1) {
                    nextBtn.html('view summary');

                } else if(e.data.inc === -1 && settings.current === settings.screenLength-2) {
                    nextBtn.html('next');
                }

                console.log(screenReached, settings.current);

                if(screenReached >= settings.current) {
                    nextBtn.attr('disabled', false);
                } else {
                    nextBtn.attr('disabled', true);
                }

                if(e.data.inc === 0) {
                    nextBtn.attr('disabled', true);
                }

            } else {

                slideElements(activity, screensWrapper, e.data.inc, settings, distanceBetweenScreens);

                if(settings.current === settings.screenLength-1) {
                    nextBtn.attr('disabled', true);
                    console.log('disabled next btn');
                } else {

                    if(screenReached > settings.current) {
                        nextBtn.attr('enabled', false);
                        console.log('enabled next btn');
                    } else {
                        nextBtn.attr('disabled', true);
                        console.log('disabled next btn');
                    }
                }
            }

            if(settings.current > screenReached) {

                screenReached = settings.current;
            }
        };

        viewSummary = function() {

            var summaryText = '';
            var thisScreen;

            summaryText += '<h2 class="bordered">'+settings.summaryIntro+'</h2>';

            for(i=0;i<settings.screenLength;i++) {

                thisScreen = activity.find('.screen').eq(i);

                for(j=0;j<3;j++) {

                    summaryText += '<div class="bordered">';

                    if(thisScreen.find('.item').eq(j).find('textarea').length > 0) {

                        summaryText += '<p>' + thisScreen.find('.item').eq(j).find('p').html() + '</p>';

                        if(thisScreen.find('.item').eq(j).find('textarea').val() === defaultEntryText) {
                            summaryText += '<p>No text entered</p>';
                        } else {
                            summaryText += '<p>' + thisScreen.find('.item').eq(j).find('textarea').val().replace( /\r?\n/g, "<br />" ) + '</p>';
                        }

                    } else {

                        summaryText += '<h2>' + thisScreen.find('.tab').eq(j).text() + '</h2>';
                        summaryText += thisScreen.find('.item').eq(j).html();
                    }

                    summaryText += '</div>';
                }

                if(i !== settings.screenLength-1 && settings.screenLength > 1) {

                    summaryText += '<hr class="whiteRule" />';
                }
            }

            activitySummary($('html'), activity, summaryText);
        };

        init = function() {

            settings = $.extend({

                multiScreen: false,
                screenLength: activity.find('.screen').length,
                current: 0,
                printable: false,
                questionText: 'Question',
                feedbackAfter: false,
                summaryIntro: 'Here is a summary of your answers:'
                
            }, options);

            screensWrapper = activity.find('.screens');
            _screen = activity.find('.screen');
            nextBtn = activity.find('button.next');
            backBtn = activity.find('button.back');
            restartBtn = activity.find('button.restart');
            tab = activity.find('.tab');
            item = _screen.find('.item');
            nextBtn.on(clickEvent, {inc:1}, moveScreens).attr('disabled', true);
            backBtn.on(clickEvent, {inc:-1}, moveScreens).attr('disabled', true);
            restartBtn.on(clickEvent, {inc:0}, moveScreens).attr('disabled', true);

            tab.on(clickEvent, clickTab);
            item.css('display', 'none');

            setMaxHeightOfElement(activity, item);

            _screen.each(function(){

                $(this).find('.tab').eq(0).addClass('active');
                $(this).find('.item').eq(0).show();
            });

            if(settings.multiScreen) {
                activity.append('<div class="progressBar"></div>');  
                createProgressBar(activity, settings.screenLength);
                distanceBetweenScreens = getDistanceBetweenElements(_screen);
            }

            if(settings.printable) {
                inputBox = activity.find('textarea');
                inputBox.html(defaultEntryText);
                textEntryFocus(inputBox);
            }

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            for(i=0;i<settings.screenLength;i++) {

                if(settings.multiScreen) {

                    accessible.append('<h3>' + settings.questionText + ' ' + (i+1) + ' of ' + settings.screenLength + ':</h3>');

                } else {

                    accessible.append('<h3>' + settings.questionText + '</h3>');
                }

                accessible.append(_screen.eq(i).find('.item').eq(0).html());
                accessible.append('<p class="initCaps"><strong>' + _screen.eq(0).find('.tab').eq(1).html() + ':</strong> ' + _screen.eq(i).find('.item').eq(1).find('p').text() + '</p>');

                accessible.append('<p class="initCaps"><strong>' + _screen.eq(0).find('.tab').eq(2).text() + ':</strong></p>');
                accessible.append(_screen.eq(i).find('.item').eq(2).html());

                if(i !== settings.screenLength-1) {
                    accessible.append('<hr />');
                }

            }

            if(settings.printable) {
                accessible.find('textarea').remove();
            }

            if(settings.feedbackAfter) {

                accessible.next('.feedbackWrapper').find('button').attr('disabled', true);
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.relatedConcepts = function( options ) {

        var activity = $(this), init, settings, concept, centralConcept, feedback, clickConcept, closeButton, closeFeedback;

        clickConcept = function() {

            var _this = $(this),
                index = _this.index('.concept.active'),
                _thisFeedback = feedback.eq(index);

            feedback.removeClass('visible');
            _thisFeedback.addClass('visible').after('<div class="popupFeedbackShadow"></div>');
            
            // _thisFeedback.find('div').prepend('<h3>'+_this.text()+'</h3>');
        };

        closeFeedback = function() {

            $(this).parent().next('.popupFeedbackShadow').remove();
            $(this).parent().removeClass('visible');
            // $(this).find('div').find('h3').remove();
        };
            
        init = function() {

            // Establish default settings and 
            // override with options param (set in html)
            settings = $.extend({
                conceptLength: activity.find('.concept.active').length,
                showCentralInAccessible: false
            }, options);

            concept = activity.find('.concept.active');
            centralConcept = activity.find('.concept.central');
            concept.on(clickEvent, clickConcept);

            feedback = activity.find('.popupFeedback');
            feedback.each(function() {

                $(this).append('<button>&times;</button>');
                $(this).find('div').prepend('<h3>' + concept.eq($(this).index()-1).text() + '</h3>');
            });

            closeButton = feedback.find('button');
            closeButton.on(clickEvent, closeFeedback);

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            if(settings.showCentralInAccessible) {

                accessible.append(feedback.eq(centralConcept.index('.concept.active')).find('div').html());
                accessible.append('<hr />');
            }

            var i;

            for(i=0;i<settings.conceptLength;i++) {

                if(!concept.eq(i).hasClass('central')) {

                    accessible.append(feedback.eq(i).find('div').html());

                    if(i !== settings.conceptLength-1) {
                        accessible.append('<hr />');
                    }
                }
            }
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.seesaw = function( options ) {

        var activity = $(this), settings, init, accessible, initDragDrop, showFeedback, clickLabel, label, feedback, item, items, dragItem, count=0, dropZone, summaryBtn, restartBtn, viewSummary, itemSummary, restartActivity,

            dragHelper, dragOS, dropOS,

            checkText = "Now check to find out if you're correct.";


        initDragDrop = function() {

            item.draggable({
                revert:'invalid',
                helper: function() {
                    var helper = $(this).clone(); 
                    helper.css({'color':'transparent'});
                    return helper;
                },

                start: function(e, ui) {
                    dragItem = $(this);
                    dragItem.addClass('dragging');
                    dragHelper = $(ui.helper);
                    dragOS = dragHelper.offset();
                    dropOS = dropZone.offset();
                },

                stop: function() {
                    dragItem.removeClass('dragging');
                    dropZone.removeClass('dropHover');

                    if(count !== dragItem.data('id')) {

                        activity.find('.incorrectMarker').addClass('visible onTop');

                        setTimeout(function(){

                            activity.find('.incorrectMarker').removeClass('visible');
                        }, 1000);

                        setTimeout(function(){

                        activity.find('.incorrectMarker').removeClass('onTop');
                    }, 2000);
                    }
                },

                drag: function() {

                    dragOS = dragHelper.offset();
                    if(dragOS.left > dropOS.left && dragOS.top > dropOS.top && dragOS.left < dropOS.left + dropZone.width() && dragOS.top < dropOS.top + dropZone.height()) {

                        dropZone.addClass('dropHover');
                    } else {

                        dropZone.removeClass('dropHover');
                    }
                },

                cursorAt: {left: 15, top: 15},
                zIndex: 10000
            });

            dropZone.droppable({

                accept: '.item[data-id="'+count+'"]',

                drop: function() {

                    dragItem.appendTo(dropZone);

                    setTimeout(function(){
                        
                        matchZone.eq(count).addClass('fadedOut');
                        dropZone.addClass('fadedOut');

                    }, 500);

                    setTimeout(function(){
                        matchZone.eq(count).removeClass('visible');

                        itemSummary.append(
                            '<div class="row">' +
                                '<div class="item">' +
                                    '<p>' + activity.find('.item[data-id="'+count+'"] p').html() + '</p>' + 
                                '</div>' + 
                                '<div class="item">' +
                                    '<p>' + activity.find('.drop.right').eq(count).find('.item p').html() + '</p>' +
                                '</div>' +
                            '</div>'
                        );

                        count += 1;
                        
                        dropZone.find('.item').hide();

                        if(count === settings.itemLength) {

                            itemSummary.show();

                            for(i=0;i<itemSummary.find('.row').length;i++) {
                                var leftItemHeight = itemSummary.find('.row').eq(i).find('.item').eq(0).height();
                                var rightItemHeight = itemSummary.find('.row').eq(i).find('.item').eq(1).height();

                                activity.find('.row').eq(i).find('.item').height((leftItemHeight > rightItemHeight) ? leftItemHeight : rightItemHeight);
                            }

                            activity.find('.scales').hide();
                            items.hide();
                            restartBtn.attr('disabled', false);

                        } else {

                            dropZone.droppable({
                                accept: activity.find('.item[data-id="'+count+'"]')
                            });

                            matchZone.eq(count).addClass('visible');
                            matchZone.eq(count).removeClass('fadedOut');
                            dropZone.removeClass('fadedOut');
                        }

                    }, 1000);
                    
                }
            });
        };

        // viewSummary = function(){


        // };

        restartActivity = function(){

            activity.find('.scales').show();
            items.show();
            item.show();
            itemSummary.html('').hide();

            dropZone.find('.item').appendTo(items);
            count = 0;

            items.find('.item').draggable('destroy');
            dropZone.droppable('destroy');
            items.find('.item').shuffle();
            item = items.find('.item');

            initDragDrop();

            matchZone.addClass('fadedOut');
            matchZone.eq(0).addClass('visible').removeClass('fadedOut');

            $(this).attr('disabled', true);

            dropZone.droppable({
                accept: activity.find('.item[data-id="'+count+'"]')
            });

            dropZone.removeClass('fadedOut');
        };
        
        init = function() {
            // Establish default settings and 
            // override with options param (set in html)

            items = activity.find('.items');
            activity.find('.items .item').shuffle();
            item = items.find('.item');

            settings = $.extend({
                itemLength: item.length,
                leftTitle: '<span class="alert">[LEFT TITLE]</span>',
                rightTitle: '<span class="alert">[RIGHT TITLE]</span>'
            }, options);
            
            dropZone = activity.find('.drop.left');
            matchZone = activity.find('.drop.right');
            matchZone.addClass('fadedOut');
            matchZone.eq(0).addClass('visible').removeClass('fadedOut');

            summaryBtn = activity.find('button.next');
            restartBtn = activity.find('button.restart');
            summaryBtn.on(clickEvent, viewSummary).attr('disabled', true);
            restartBtn.on(clickEvent, restartActivity).attr('disabled', true);
            activity.append('<div class="itemSummary"></div>')
            itemSummary = activity.find('div.itemSummary');
            itemSummary.height(activity.height() - activity.find('.nav').height()).hide();

            dropOS = dropZone.offset();

            initDragDrop();

            activity.height(activity.height());

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            accessible.append('<h3>' + settings.leftTitle + '</h3>');
            accessible.append('<h3>' + settings.rightTitle + '</h3>');
            accessible.find('h3').after('<ul></ul>');
            accessible.append('<hr /><p>' + checkText + '</p><hr />');
            accessible.append('<p><strong>Feedback:</strong></p><ul></ul>');

            for(i=0;i<settings.itemLength;i++) {

                accessible.find('h3').eq(0).next('ul').append('<li>' + item.eq(i).text() + '</li>');
                accessible.find('h3').eq(1).next('ul').append('<li>' + matchZone.eq(i).find('.item').text() + '</li>');

                accessible.find('ul').eq(2).append('<li>' + activity.find('.item[data-id="'+i+'"]').text() + ' : ' + matchZone.eq(i).find('.item').text() + '</li>');
            }

            activity.append('<div class="incorrectMarker"></div>');
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.splashscreen = function( options ) {

        var activity = $(this), init, settings, accessible, clickTab, moveScreens, tab, distanceBetweenScreens;

        clickTab = function() {

        	var index = $(this).index();
					
			$('.content').hide().eq(index+1).show();
						
			$('.nav_item').removeClass('selected');
			$(this).addClass('selected');
						
			if(index === 0) {
				distanceBetweenScreens = getDistanceBetweenElements(_screen);
				$('#content1 .biotext').scrollTop(0);
			}
		
			if(index === 1) {
				$('#content2').find('ul').scrollTop(0);
			}
        };

        moveScreens = function (e) {

        	settings.current += e.data.inc;
        	screensWrapper.css('left', settings.current * -distanceBetweenScreens + 'px');
        	backButton.attr('disabled', (settings.current === 0) ? true : false);
        	nextButton.attr('disabled', (settings.current === settings.numAuthors-1) ? true : false);
        };
            
        init = function() {
            // Establish default settings and 
            // override with options param (set in html)
            settings = $.extend({
                numAuthors: activity.find('#content1').find('.screen').length,
                current: 0
            }, options);

            screensWrapper = activity.find('#content1').find('.screens');
            _screen = screensWrapper.find('.screen');
            backButton = activity.find('.authorNav').find('button.bck').on(clickEvent, {inc:-1}, moveScreens).attr('disabled', true);
            nextButton = activity.find('.authorNav').find('button.nxt').on(clickEvent, {inc:1}, moveScreens);
            tab = activity.find('.nav_item').on(clickEvent, clickTab);

            activity.find('.content').hide().first().show();
            activity.find('.content').first().find('span').hide();

            setTimeout(function(){
            	activity.find('.content').first().find('span').fadeIn(2000);
            }, 500);

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            accessible.append('<h1>' + activity.find('.nav_item').eq(0).text() + '</h1>');

            for(i=0;i<settings.numAuthors;i++) {

            	accessible.append('<h2>' + activity.find('#content1').find('.screen').eq(i).find('h1').text() + '</h2>');
            	accessible.append(activity.find('#content1').find('.screen').eq(i).find('.biotext').html());
            	accessible.append('<hr />');
            }

            accessible.append('<h1>' + activity.find('.nav_item').eq(1).text() + '</h1>');
            accessible.append(activity.find('#content2').html());
            accessible.append('<hr />');
            accessible.append('<h1>' + activity.find('.nav_item').eq(2).text() + '</h1>');
            accessible.append(activity.find('#content3').html());
            accessible.append('<hr />');
            accessible.append('<h1>' + activity.find('.nav_item').eq(3).text() + '</h1>');
            accessible.append(activity.find('#content4').html());
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.slider = function( options ) {

        var activity = $(this), settings, init, showFeedback, clickLabel, label, feedback;

        clickLabel = function() {

            var thisIndex = $(this).index();
            feedback.removeClass('visible').eq(thisIndex).addClass('visible');

            activity.find('input').val(($(this).index()+0.5) * 100/settings.itemLength).change();
        };

        showFeedback = function() {

            var stepValue = Math.floor(this.value / (100/settings.itemLength));
                feedback.removeClass('visible').eq(stepValue).addClass('visible');

            if(settings.snap) {
                
                activity.find('input').val((stepValue + 0.5) * 100/settings.itemLength).change();
            }

           
        };

        init = function() {
            // Establish default settings and 
            // override with options param (set in html)
            settings = $.extend({
                itemLength: activity.find('.label').length,
                snap: true
            }, options);

            label = activity.find('.label');
            label.on(clickEvent, clickLabel);
            feedback = activity.find('.sliderFeedback');

            label.css({
                'width': (100/settings.itemLength) + '%'
            });

            // activity.find('input').on('mouseup touchend', );
            activity.find('input').rangeslider({
                onSlideEnd: showFeedback,
                polyfill:false
            });

            feedback.each(function(index) {

                $(this).prepend('<h3>' + label.eq(index).find('p').text() + '</h3>');
            });

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            for(i=0;i<settings.itemLength;i++) {

                accessible.append(feedback.eq(i).html());

                if(i !== settings.itemLength-1) {
                    accessible.append('<hr />');
                }
            }

        };

        init();
    };

}(jQuery));

/***********************************************************

    MMD_3_40 (radio buttons activate )

***********************************************************/

(function($) {

    $.fn.slidersWithSummary = function( options ) {

        var activity = $(this), init, settings, accessible, moveScreens,

        _screen, screensWrapper, nextBtn, backBtn, restartBtn,

        valsArray = [];

        moveScreens = function(e) {

            slideElements(activity, screensWrapper, e.data.inc, settings, distanceBetweenScreens);

            if(settings.current === settings.screenLength-1) {

                nextBtn.attr('disabled', true);
                restartBtn.attr('disabled', false);

                activity.find('.scoresTable').find('.row').html('');

                activity.find('input').each(function(index){

                    valsArray[index].heading = _screen.eq(index).find('h2.heading').text();
                    valsArray[index].score = $(this).val();

                });

                valsArray.sort(function(a,b) {
                    return parseFloat(a.score) - parseFloat(b.score);
                });

                valsArray.reverse();

                for(i=0;i<valsArray.length;i++) {
                    activity.find('.scoresTable').find('.row').eq(i).append('<p>'+valsArray[i].heading);
                    activity.find('.scoresTable').find('.row').eq(i).append('<span class="score">'+valsArray[i].score+'</span></p>');
                }
            } else {
                nextBtn.attr('disabled', false);
            }

            if(e.data.inc === 0) {
                restartBtn.attr('disabled', true);
                activity.find("input[type=range]").val(5).each(function(){

                    $(this).prev('h2.value').html($(this).val());
                });
            }
        };
        
        init = function() {

            settings = $.extend({

                screenLength: activity.find('.screen').length,
                current: 0
                
            }, options);

            for(i=0;i<settings.screenLength-1;i++) {
                valsArray.push({});
            }

            screensWrapper = activity.find('.screens');
            _screen = activity.find('.screen');
            nextBtn = activity.find('button.next');
            backBtn = activity.find('button.back');
            restartBtn = activity.find('button.restart');

            nextBtn.on(clickEvent, {inc:1}, moveScreens);
            backBtn.on(clickEvent, {inc:-1}, moveScreens).attr('disabled', true);
            restartBtn.on(clickEvent, {inc:0, restart:true}, moveScreens).attr('disabled', true);

            activity.append('<div class="progressBar"></div>');  
            createProgressBar(activity, settings.screenLength);
            distanceBetweenScreens = getDistanceBetweenElements(_screen);

            setMaxHeightOfElement(activity, _screen);

            activity.find('input').each(function(){

                $(this).prev('h2.value').html($(this).val());
            });

            activity.find('input').on('change', function(){

                $(this).prev('h2.value').html($(this).val());
            });

            for(i=0;i<11;i++) {
                activity.find('.axis').each(function(){
                    $(this).append('<h2>'+i+'</h2>');
                })
            }

            for(i=0;i<settings.screenLength-1;i++) {
                activity.find('.scoresTable').append('<div class="row"></div>')
            }

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            for(i=0;i<settings.screenLength-1;i++) {

                accessible.append('<h2>Step ' + (i+1) + ' of ' + (settings.screenLength-1) + ':</h2>');

                accessible.append(_screen.eq(i).html());

                if(i !== settings.screenLength-2) {
                    accessible.append('<hr />');
                }
            }

            accessible.find('input, h2.value').remove();
            accessible.find('hr').prev('p').remove();
            accessible.find('div.axis').prev('p').remove();
			accessible.find('div.axis').remove();
            accessible.find('p').last().remove();
        };

        init();
    };

}(jQuery));

(function($) {

    $.fn.tabbing = function( options ) {

        var activity = $(this), backBtn, distanceBetweenScreens, clickTab, init, moveScreens, nextBtn, printBtn, screensWrapper, _screen, settings, tab, tabs, tabContent, accessible;
        
         moveScreens = function(e) {

            slideElements(activity, screensWrapper, e.data.inc, settings, distanceBetweenScreens);

            if(e.data.inc === 1 && settings.current === settings.screenLength-1) {

                if(settings.printable) {
                    nextBtn.removeClass('next').addClass('print').html('print');
                } else {
                    nextBtn.attr('disabled', true);
                }

            } else if(e.data.inc === -1 && settings.current === settings.screenLength-2) {

                if(settings.printable) {
                    printBtn = activity.find('button.print');
                    printBtn.removeClass('print').addClass('next').html('next');
                } else {
                    nextBtn.attr('disabled', false);
                }
            }
        };

        clickTab = function() {
            var _this = $(this),
                thisScreen = _this.parents().eq(1);

            thisScreen.find('.tabContent').hide().eq(_this.index()).show();
            thisScreen.find('.tab').removeClass('active');
            _this.addClass('active');
        };

        init = function() {

            settings = $.extend({
                tabPosition: 'bottom',
                printable: false,
                multiScreen: false,
                opinions: false,
                screenLength: activity.find('.screen').length,
                tabLength: [1],
                current: 0,
                screenText: 'Screen',
                itemText: 'Opinion'
            }, options);

            tabs = activity.find('.screen .tabs');
            tab = activity.find('.tab');
            tabContent = activity.find('.screen .tabContent');
            screensWrapper = activity.find('.screens');
            _screen = activity.find('.screen');
            nextBtn = activity.find('button.next');
            backBtn = activity.find('button.back');
            backBtn.attr('disabled', true);

            tab.on(clickEvent, clickTab);
            nextBtn.on(clickEvent, {inc:1}, moveScreens);
            backBtn.on(clickEvent, {inc:-1}, moveScreens);

            tab.first().addClass('active');
            tabContent.hide().first().show();

            _screen.each(function() {
                $(this).find('.tabContent').eq(0).show();
                $(this).find('.tab').first().addClass('active');
            });

            if(settings.multiScreen) {
                activity.append('<div class="progressBar"></div>');
                createProgressBar(activity, settings.screenLength);
                distanceBetweenScreens = getDistanceBetweenElements(_screen);
            }

            if(settings.tabPosition === 'left') {
                activity.addClass('left');
                tabContent.css('min-height', tabs.height());

            } else if(settings.tabPosition === 'top') {
                activity.addClass('top');
                tabs.height('auto');
            }

            if(settings.opinions) {

                _screen.each(function(){
                    $(this).find('.tabs').addClass('heads');
                    $(this).find('.tab').width($(this).find('.tabs').width()/$(this).find('.tab').length);
                });
            }

            if(settings.printable) {
                inputBox = activity.find('textarea');
                inputBox.html(defaultEntryText);
                textEntryFocus(inputBox);
            }

            setMaxHeightOfElement(activity, tabContent);

            activity.after('<div class="accessible"></div>');
            accessible = activity.next('.accessible');

            var i, j;

            for(i=0;i<settings.screenLength;i++) {

                if(settings.screenLength !== 1) {
                    accessible.append('<h1>'+ settings.screenText + ' ' + (i+1) + ' of ' + settings.screenLength + '</h1>');
                }

                settings.tabLength[i] = _screen.eq(i).find('.tabContent').length;

                for(j=1;j<=settings.tabLength[i];j++) {

                    if(settings.opinions) {

                        if(_screen.eq(i).find('.tabContent').eq(j-1).find('h2').length === 0) {

                            accessible.append('<h2>'+settings.itemText + ' ' + j + ' of ' + settings.tabLength[i] + ':</h2>');
                        }

                    } else {
                        accessible.append('<h2>' + _screen.eq(i).find('.tab').eq(j-1).html() + '</h2>');
                    }

                    accessible.append(_screen.eq(i).find('.tabContent').eq(j-1).html());

                    if(j !== settings.tabLength[i]) {
                        accessible.append('<hr />');
                    }
                }

                if(i !== settings.screenLength-1) {
                    accessible.append('<hr class="accessibleScreenBreak" />');
                }
            }
            
        };

        init();
    };

}(jQuery));

